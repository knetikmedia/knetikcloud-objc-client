#import <Foundation/Foundation.h>
#import "SWGAnswerResource.h"
#import "SWGCollectionString_.h"
#import "SWGDeltaResource.h"
#import "SWGImportJobResource.h"
#import "SWGPageResourceImportJobResource_.h"
#import "SWGPageResourceQuestionResource_.h"
#import "SWGPageResourceQuestionTemplateResource_.h"
#import "SWGQuestionResource.h"
#import "SWGQuestionTemplateResource.h"
#import "SWGResult.h"
#import "SWGApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGGamificationTriviaApi: NSObject <SWGApi>

extern NSString* kSWGGamificationTriviaApiErrorDomain;
extern NSInteger kSWGGamificationTriviaApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Add an answer to a question
/// 
///
/// @param questionId The id of the question
/// @param answer The new answer (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGAnswerResource*
-(NSURLSessionTask*) addQuestionAnswersWithQuestionId: (NSString*) questionId
    answer: (SWGAnswerResource*) answer
    completionHandler: (void (^)(SWGAnswerResource* output, NSError* error)) handler;


/// Add a tag to a question
/// 
///
/// @param _id The id of the question
/// @param tag The new tag (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return 
-(NSURLSessionTask*) addQuestionTagWithId: (NSString*) _id
    tag: (NSString*) tag
    completionHandler: (void (^)(NSError* error)) handler;


/// Add a tag to a batch of questions
/// All questions that dont't have the tag and match filters will have it added. The returned number is the number of questions updated.
///
/// @param tag The tag to add (optional)
/// @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
/// @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
/// @param filterCategory Filter for questions with specified category, by id (optional)
/// @param filterTag Filter for questions with specified tag (optional)
/// @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
/// @param filterType Filter for questions with specified type (optional)
/// @param filterPublished Filter for questions currenctly published or not (optional)
/// @param filterImportId Filter for questions from a specific import job (optional)
/// 
///  code:200 message:"The number of records updated",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSNumber*
-(NSURLSessionTask*) addTagToQuestionsBatchWithTag: (NSString*) tag
    filterSearch: (NSString*) filterSearch
    filterIdset: (NSString*) filterIdset
    filterCategory: (NSString*) filterCategory
    filterTag: (NSString*) filterTag
    filterTagset: (NSString*) filterTagset
    filterType: (NSString*) filterType
    filterPublished: (NSNumber*) filterPublished
    filterImportId: (NSNumber*) filterImportId
    completionHandler: (void (^)(NSNumber* output, NSError* error)) handler;


/// Create an import job
/// Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
///
/// @param request The new import job (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGImportJobResource*
-(NSURLSessionTask*) createImportJobWithRequest: (SWGImportJobResource*) request
    completionHandler: (void (^)(SWGImportJobResource* output, NSError* error)) handler;


/// Create a question
/// 
///
/// @param question The new question (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGQuestionResource*
-(NSURLSessionTask*) createQuestionWithQuestion: (SWGQuestionResource*) question
    completionHandler: (void (^)(SWGQuestionResource* output, NSError* error)) handler;


/// Create a question template
/// Question templates define a type of question and the properties they have
///
/// @param questionTemplateResource The question template resource object (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGQuestionTemplateResource*
-(NSURLSessionTask*) createQuestionTemplateWithQuestionTemplateResource: (SWGQuestionTemplateResource*) questionTemplateResource
    completionHandler: (void (^)(SWGQuestionTemplateResource* output, NSError* error)) handler;


/// Delete an import job
/// Also deletes all questions that were imported by it
///
/// @param _id The id of the job
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return 
-(NSURLSessionTask*) deleteImportJobWithId: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a question
/// 
///
/// @param _id The id of the question
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return 
-(NSURLSessionTask*) deleteQuestionWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Remove an answer from a question
/// 
///
/// @param questionId The id of the question
/// @param _id The id of the answer
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return 
-(NSURLSessionTask*) deleteQuestionAnswersWithQuestionId: (NSString*) questionId
    _id: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a question template
/// If cascade = 'detach', it will force delete the template even if it's attached to other objects
///
/// @param _id The id of the template
/// @param cascade The value needed to delete used templates (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return 
-(NSURLSessionTask*) deleteQuestionTemplateWithId: (NSString*) _id
    cascade: (NSString*) cascade
    completionHandler: (void (^)(NSError* error)) handler;


/// Get an import job
/// 
///
/// @param _id The id of the job
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGImportJobResource*
-(NSURLSessionTask*) getImportJobWithId: (NSNumber*) _id
    completionHandler: (void (^)(SWGImportJobResource* output, NSError* error)) handler;


/// Get a list of import job
/// 
///
/// @param filterVendor Filter for jobs by vendor id (optional)
/// @param filterCategory Filter for jobs by category id (optional)
/// @param filterName Filter for jobs which name *STARTS* with the given string (optional)
/// @param filterStatus Filter for jobs that are in a specific set of statuses (comma separated) (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGPageResourceImportJobResource_*
-(NSURLSessionTask*) getImportJobsWithFilterVendor: (NSString*) filterVendor
    filterCategory: (NSString*) filterCategory
    filterName: (NSString*) filterName
    filterStatus: (NSString*) filterStatus
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(SWGPageResourceImportJobResource_* output, NSError* error)) handler;


/// Get a single question
/// 
///
/// @param _id The id of the question
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGQuestionResource*
-(NSURLSessionTask*) getQuestionWithId: (NSString*) _id
    completionHandler: (void (^)(SWGQuestionResource* output, NSError* error)) handler;


/// Get an answer for a question
/// 
///
/// @param questionId The id of the question
/// @param _id The id of the answer
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGAnswerResource*
-(NSURLSessionTask*) getQuestionAnswerWithQuestionId: (NSString*) questionId
    _id: (NSString*) _id
    completionHandler: (void (^)(SWGAnswerResource* output, NSError* error)) handler;


/// List the answers available for a question
/// 
///
/// @param questionId The id of the question
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSArray<SWGAnswerResource>*
-(NSURLSessionTask*) getQuestionAnswersWithQuestionId: (NSString*) questionId
    completionHandler: (void (^)(NSArray<SWGAnswerResource>* output, NSError* error)) handler;


/// List question deltas in ascending order of updated date
/// The 'since' parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
///
/// @param since Timestamp in seconds (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSArray<SWGDeltaResource>*
-(NSURLSessionTask*) getQuestionDeltasWithSince: (NSNumber*) since
    completionHandler: (void (^)(NSArray<SWGDeltaResource>* output, NSError* error)) handler;


/// List the tags for a question
/// 
///
/// @param _id The id of the question
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSArray<NSString*>*
-(NSURLSessionTask*) getQuestionTagsWithId: (NSString*) _id
    completionHandler: (void (^)(NSArray<NSString*>* output, NSError* error)) handler;


/// Get a single question template
/// 
///
/// @param _id The id of the template
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGQuestionTemplateResource*
-(NSURLSessionTask*) getQuestionTemplateWithId: (NSString*) _id
    completionHandler: (void (^)(SWGQuestionTemplateResource* output, NSError* error)) handler;


/// List and search question templates
/// 
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGPageResourceQuestionTemplateResource_*
-(NSURLSessionTask*) getQuestionTemplatesWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(SWGPageResourceQuestionTemplateResource_* output, NSError* error)) handler;


/// List and search questions
/// 
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
/// @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
/// @param filterCategory Filter for questions with specified category, by id (optional)
/// @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
/// @param filterTag Filter for questions with specified tag (optional)
/// @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
/// @param filterPublished Filter for questions currenctly published or not (optional)
/// @param filterImportId Filter for questions from a specific import job (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGPageResourceQuestionResource_*
-(NSURLSessionTask*) getQuestionsWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    filterSearch: (NSString*) filterSearch
    filterIdset: (NSString*) filterIdset
    filterCategory: (NSString*) filterCategory
    filterTagset: (NSString*) filterTagset
    filterTag: (NSString*) filterTag
    filterType: (NSString*) filterType
    filterPublished: (NSNumber*) filterPublished
    filterImportId: (NSNumber*) filterImportId
    completionHandler: (void (^)(SWGPageResourceQuestionResource_* output, NSError* error)) handler;


/// Count questions based on filters
/// This is also provided by the list endpoint so you don't need to call this for pagination purposes
///
/// @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
/// @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
/// @param filterCategory Filter for questions with specified category, by id (optional)
/// @param filterTag Filter for questions with specified tag (optional)
/// @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
/// @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
/// @param filterPublished Filter for questions currenctly published or not (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSNumber*
-(NSURLSessionTask*) getQuestionsCountWithFilterSearch: (NSString*) filterSearch
    filterIdset: (NSString*) filterIdset
    filterCategory: (NSString*) filterCategory
    filterTag: (NSString*) filterTag
    filterTagset: (NSString*) filterTagset
    filterType: (NSString*) filterType
    filterPublished: (NSNumber*) filterPublished
    completionHandler: (void (^)(NSNumber* output, NSError* error)) handler;


/// Start processing an import job
/// Will process the CSV file and add new questions asynchronously. The status of the job must be 'VALID'.
///
/// @param _id The id of the job
/// @param publishNow Whether the new questions should be published live immediately
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGImportJobResource*
-(NSURLSessionTask*) processImportJobWithId: (NSNumber*) _id
    publishNow: (NSNumber*) publishNow
    completionHandler: (void (^)(SWGImportJobResource* output, NSError* error)) handler;


/// Remove a tag from a question
/// 
///
/// @param _id The id of the question
/// @param tag The tag to remove
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return 
-(NSURLSessionTask*) removeQuestionTagWithId: (NSString*) _id
    tag: (NSString*) tag
    completionHandler: (void (^)(NSError* error)) handler;


/// Remove a tag from a batch of questions
/// ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
///
/// @param tag The tag to remove
/// @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
/// @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
/// @param filterCategory Filter for questions with specified category, by id (optional)
/// @param filterTag Filter for questions with specified tag (optional)
/// @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
/// @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
/// @param filterPublished Filter for questions currenctly published or not (optional)
/// @param filterImportId Filter for questions from a specific import job (optional)
/// 
///  code:200 message:"The number of records updated",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSNumber*
-(NSURLSessionTask*) removeTagToQuestionsBatchWithTag: (NSString*) tag
    filterSearch: (NSString*) filterSearch
    filterIdset: (NSString*) filterIdset
    filterCategory: (NSString*) filterCategory
    filterTag: (NSString*) filterTag
    filterTagset: (NSString*) filterTagset
    filterType: (NSString*) filterType
    filterPublished: (NSNumber*) filterPublished
    filterImportId: (NSNumber*) filterImportId
    completionHandler: (void (^)(NSNumber* output, NSError* error)) handler;


/// List and search tags by the beginning of the string
/// For performance reasons, search & category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
///
/// @param filterSearch Filter for tags starting with the given text (optional)
/// @param filterCategory Filter for tags on questions from a specific category (optional)
/// @param filterImportId Filter for tags on questions from a specific import job (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGCollectionString_*
-(NSURLSessionTask*) searchQuestionTagsWithFilterSearch: (NSString*) filterSearch
    filterCategory: (NSString*) filterCategory
    filterImportId: (NSNumber*) filterImportId
    completionHandler: (void (^)(SWGCollectionString_* output, NSError* error)) handler;


/// Update an import job
/// Changes should be made before process is started for there to be any effect.
///
/// @param _id The id of the job
/// @param request The updated job (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGImportJobResource*
-(NSURLSessionTask*) updateImportJobWithId: (NSNumber*) _id
    request: (SWGImportJobResource*) request
    completionHandler: (void (^)(SWGImportJobResource* output, NSError* error)) handler;


/// Update a question
/// 
///
/// @param _id The id of the question
/// @param question The updated question (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGQuestionResource*
-(NSURLSessionTask*) updateQuestionWithId: (NSString*) _id
    question: (SWGQuestionResource*) question
    completionHandler: (void (^)(SWGQuestionResource* output, NSError* error)) handler;


/// Update an answer for a question
/// 
///
/// @param questionId The id of the question
/// @param _id The id of the answer
/// @param answer The updated answer (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return 
-(NSURLSessionTask*) updateQuestionAnswerWithQuestionId: (NSString*) questionId
    _id: (NSString*) _id
    answer: (SWGAnswerResource*) answer
    completionHandler: (void (^)(NSError* error)) handler;


/// Update a question template
/// 
///
/// @param _id The id of the template
/// @param questionTemplateResource The question template resource object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGQuestionTemplateResource*
-(NSURLSessionTask*) updateQuestionTemplateWithId: (NSString*) _id
    questionTemplateResource: (SWGQuestionTemplateResource*) questionTemplateResource
    completionHandler: (void (^)(SWGQuestionTemplateResource* output, NSError* error)) handler;


/// Bulk update questions
/// Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
///
/// @param question New values for a set of question fields (optional)
/// @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
/// @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
/// @param filterCategory Filter for questions with specified category, by id (optional)
/// @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
/// @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
/// @param filterPublished Filter for questions currenctly published or not (optional)
/// @param filterImportId Filter for questions from a specific import job (optional)
/// 
///  code:200 message:"The number of records updated",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSNumber*
-(NSURLSessionTask*) updateQuestionsInBulkWithQuestion: (SWGQuestionResource*) question
    filterSearch: (NSString*) filterSearch
    filterIdset: (NSString*) filterIdset
    filterCategory: (NSString*) filterCategory
    filterTagset: (NSString*) filterTagset
    filterType: (NSString*) filterType
    filterPublished: (NSNumber*) filterPublished
    filterImportId: (NSNumber*) filterImportId
    completionHandler: (void (^)(NSNumber* output, NSError* error)) handler;



@end
