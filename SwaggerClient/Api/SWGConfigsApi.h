#import <Foundation/Foundation.h>
#import "SWGConfig.h"
#import "SWGPageResourceConfig_.h"
#import "SWGApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGConfigsApi: NSObject <SWGApi>

extern NSString* kSWGConfigsApiErrorDomain;
extern NSInteger kSWGConfigsApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create a new config
/// 
///
/// @param config The config object (optional)
/// 
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGConfig*
-(NSURLSessionTask*) createConfigUsingPOSTWithConfig: (SWGConfig*) config
    completionHandler: (void (^)(SWGConfig* output, NSError* error)) handler;


/// Delete an existing config
/// 
///
/// @param name The config name
/// 
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return 
-(NSURLSessionTask*) deleteConfigUsingDELETEWithName: (NSString*) name
    completionHandler: (void (^)(NSError* error)) handler;


/// Get a single config
/// Only configs that are public readable will be shown without admin access
///
/// @param name The config name
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGConfig*
-(NSURLSessionTask*) getConfigUsingGETWithName: (NSString*) name
    completionHandler: (void (^)(SWGConfig* output, NSError* error)) handler;


/// List and search configs
/// 
///
/// @param filterSearch Filter for configs whose name contains the given string (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to 1)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGPageResourceConfig_*
-(NSURLSessionTask*) getConfigsUsingGETWithFilterSearch: (NSString*) filterSearch
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(SWGPageResourceConfig_* output, NSError* error)) handler;


/// Update an existing config
/// 
///
/// @param name The config name
/// @param config The config object (optional)
/// 
///  code:201 message:"Created",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return 
-(NSURLSessionTask*) updateConfigUsingPUTWithName: (NSString*) name
    config: (SWGConfig*) config
    completionHandler: (void (^)(NSError* error)) handler;



@end
