#import <Foundation/Foundation.h>
#import "SWGBreTriggerResource.h"
#import "SWGLevelingResource.h"
#import "SWGPageResourceLevelingResource_.h"
#import "SWGPageResourceUserLevelingResource_.h"
#import "SWGUserLevelingResource.h"
#import "SWGApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGGamificationLevelingApi: NSObject <SWGApi>

extern NSString* kSWGGamificationLevelingApiErrorDomain;
extern NSInteger kSWGGamificationLevelingApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create a level schema
/// 
///
/// @param level The level schema definition (optional)
/// 
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGLevelingResource*
-(NSURLSessionTask*) createLevelWithLevel: (SWGLevelingResource*) level
    completionHandler: (void (^)(SWGLevelingResource* output, NSError* error)) handler;


/// Delete a level
/// 
///
/// @param name The level schema name
/// 
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return 
-(NSURLSessionTask*) deleteLevelWithName: (NSString*) name
    completionHandler: (void (^)(NSError* error)) handler;


/// Retrieve a level
/// 
///
/// @param name The level schema name
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGLevelingResource*
-(NSURLSessionTask*) getLevelWithName: (NSString*) name
    completionHandler: (void (^)(SWGLevelingResource* output, NSError* error)) handler;


/// Get the list of triggers that can be used to trigger a leveling progress update
/// 
///
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSArray<SWGBreTriggerResource>*
-(NSURLSessionTask*) getLevelTriggersWithCompletionHandler: 
    (void (^)(NSArray<SWGBreTriggerResource>* output, NSError* error)) handler;


/// List and search levels
/// Get a list of levels schemas with optional filtering
///
/// @param filterName Filter for level schemas whose name contains a given string (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to name:ASC)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGPageResourceLevelingResource_*
-(NSURLSessionTask*) getLevelsWithFilterName: (NSString*) filterName
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(SWGPageResourceLevelingResource_* output, NSError* error)) handler;


/// Get a user's progress for a given level schema
/// 
///
/// @param userId The id of the user
/// @param name The level schema name
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGUserLevelingResource*
-(NSURLSessionTask*) getUserLevelWithUserId: (NSNumber*) userId
    name: (NSString*) name
    completionHandler: (void (^)(SWGUserLevelingResource* output, NSError* error)) handler;


/// Get a user's progress for all level schemas
/// 
///
/// @param userId The id of the user
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGPageResourceUserLevelingResource_*
-(NSURLSessionTask*) getUserLevelsWithUserId: (NSNumber*) userId
    completionHandler: (void (^)(SWGPageResourceUserLevelingResource_* output, NSError* error)) handler;


/// Update a level
/// 
///
/// @param name The level schema name
/// @param varNewLevel The level schema definition (optional)
/// 
///  code:201 message:"Created",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return 
-(NSURLSessionTask*) updateLevelWithName: (NSString*) name
    varNewLevel: (SWGLevelingResource*) varNewLevel
    completionHandler: (void (^)(NSError* error)) handler;


/// Update or create a leveling progress record for a user
/// If no progress record yet exists for the user, it will be created. Otherwise it will be updated. If progress meets or exceeds the level's max_value it will be marked as earned and a BRE event will be triggered for the <code>BreAchievementEarnedTrigger</code>.
///
/// @param userId The id of the user
/// @param name The level schema name
/// @param progress The current progress amount (optional)
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return 
-(NSURLSessionTask*) updateUserLevelWithUserId: (NSNumber*) userId
    name: (NSString*) name
    progress: (NSNumber*) progress
    completionHandler: (void (^)(NSError* error)) handler;



@end
