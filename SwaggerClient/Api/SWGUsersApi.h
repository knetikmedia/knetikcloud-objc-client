#import <Foundation/Foundation.h>
#import "SWGNewPasswordRequest.h"
#import "SWGPageResourceTemplateResource_.h"
#import "SWGPageResourceUserBaseResource_.h"
#import "SWGTemplateResource.h"
#import "SWGUserResource.h"
#import "SWGApi.h"

/**
* Knetik Platform API Documentation Latest
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
*
* OpenAPI spec version: Latest
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGUsersApi: NSObject <SWGApi>

extern NSString* kSWGUsersApiErrorDomain;
extern NSInteger kSWGUsersApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Add a tag to a user
///
/// @param userId The id of the user
/// @param tag tag
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
-(NSNumber*) addTagUsingPOST1WithUserId: (NSNumber*) userId
    tag: (NSString*) tag
    completionHandler: (void (^)(NSError* error)) handler;

/// Create a user template
/// User Templates define a type of user and the properties they have
///
/// @param userTemplateResource The user template resource object (optional)
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGTemplateResource*
-(NSNumber*) createUserTemplateUsingPOSTWithUserTemplateResource: (SWGTemplateResource*) userTemplateResource
    completionHandler: (void (^)(SWGTemplateResource* output, NSError* error)) handler;

/// Delete a user template
/// If cascade = 'detach', it will force delete the template even if it's attached to other objects
///
/// @param _id The id of the template
/// @param cascade The value needed to delete used templates (optional)
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
-(NSNumber*) deleteUserTemplateUsingDELETEWithId: (NSString*) _id
    cascade: (NSString*) cascade
    completionHandler: (void (^)(NSError* error)) handler;

/// Choose a new password after a reset
/// Finish resetting a user's password using the secret provided from the password-reset endpoint.  Password should be in plain text and will be encrypted on receipt. Use SSL for security.
///
/// @param _id The id of the user
/// @param varNewPasswordRequest The new password request object (optional)
///  code:201 message:"Created",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
-(NSNumber*) doPasswordResetUsingPUTWithId: (NSNumber*) _id
    varNewPasswordRequest: (SWGNewPasswordRequest*) varNewPasswordRequest
    completionHandler: (void (^)(NSError* error)) handler;

/// List tags for a user
///
/// @param userId The id of the user
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return NSArray<NSString*>*
-(NSNumber*) getTagsUsingGET3WithUserId: (NSNumber*) userId
    completionHandler: (void (^)(NSArray<NSString*>* output, NSError* error)) handler;

/// Get a single user template
///
/// @param _id The id of the template
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGTemplateResource*
-(NSNumber*) getUserTemplateUsingGETWithId: (NSString*) _id
    completionHandler: (void (^)(SWGTemplateResource* output, NSError* error)) handler;

/// List and search user templates
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGPageResourceTemplateResource_*
-(NSNumber*) getUserTemplatesUsingGETWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(SWGPageResourceTemplateResource_* output, NSError* error)) handler;

/// Get a single user
/// Additional private info is included as USERS_ADMIN
///
/// @param _id The id of the user or 'me'
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGUserResource*
-(NSNumber*) getUserUsingGETWithId: (NSString*) _id
    completionHandler: (void (^)(SWGUserResource* output, NSError* error)) handler;

/// List and search users
/// Additional private info is included as USERS_ADMIN
///
/// @param filterDisplayname Filter for users whose display name starts with provided string. (optional)
/// @param filterEmail Filter for users whose email starts with provided string. Requires USERS_ADMIN permission (optional)
/// @param filterFirstname Filter for users whose first name starts with provided string. Requires USERS_ADMIN permission (optional)
/// @param filterFullname Filter for users whose full name starts with provided string. Requires USERS_ADMIN permission (optional)
/// @param filterLastname Filter for users whose last name starts with provided string. Requires USERS_ADMIN permission (optional)
/// @param filterUsername Filter for users whose username starts with the provided string. Requires USERS_ADMIN permission (optional)
/// @param filterTag Filter for users who have a given tag (optional)
/// @param filterGroup Filter for users in a given group, by unique name (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGPageResourceUserBaseResource_*
-(NSNumber*) getUsersUsingGETWithFilterDisplayname: (NSString*) filterDisplayname
    filterEmail: (NSString*) filterEmail
    filterFirstname: (NSString*) filterFirstname
    filterFullname: (NSString*) filterFullname
    filterLastname: (NSString*) filterLastname
    filterUsername: (NSString*) filterUsername
    filterTag: (NSString*) filterTag
    filterGroup: (NSString*) filterGroup
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(SWGPageResourceUserBaseResource_* output, NSError* error)) handler;

/// Reset a user's password
/// A reset code will be generated and a 'forgot_password' BRE event will be fired with that code; this can be routed to the user as needed and submitted to the 'choose a new password' endpoint.
///
/// @param _id The id of the user
///  code:201 message:"Created",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
-(NSNumber*) initiatePasswordResetUsingPOSTWithId: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;

/// Register a new user
/// Password should be in plain text and will be encrypted on receipt. Use SSL for security
///
/// @param userResource The user resource object (optional)
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGUserResource*
-(NSNumber*) registerUserUsingPOSTWithUserResource: (SWGUserResource*) userResource
    completionHandler: (void (^)(SWGUserResource* output, NSError* error)) handler;

/// Remove a tag from a user
///
/// @param userId The id of the user
/// @param tag The tag to remove
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
-(NSNumber*) removeTagUsingDELETE1WithUserId: (NSNumber*) userId
    tag: (NSString*) tag
    completionHandler: (void (^)(NSError* error)) handler;

/// Set a user's password
/// Password should be in plain text and will be encrypted on receipt. Use SSL for security.
///
/// @param _id The id of the user
/// @param password The new plain text password (optional)
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
-(NSNumber*) setPasswordUsingPUTWithId: (NSNumber*) _id
    password: (NSString*) password
    completionHandler: (void (^)(NSError* error)) handler;

/// Update a user template
///
/// @param _id The id of the template
/// @param userTemplateResource The user template resource object (optional)
///  code:201 message:"Created",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
-(NSNumber*) updateUserTemplateUsingPUTWithId: (NSString*) _id
    userTemplateResource: (SWGTemplateResource*) userTemplateResource
    completionHandler: (void (^)(NSError* error)) handler;

/// Update a user's info
/// Password will not be edited on this endpoint, use password specific endpoints.
///
/// @param _id The id of the user or 'me'
/// @param userResource The user resource object (optional)
///  code:201 message:"Created",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
-(NSNumber*) updateUserUsingPUTWithId: (NSString*) _id
    userResource: (SWGUserResource*) userResource
    completionHandler: (void (^)(NSError* error)) handler;


@end
