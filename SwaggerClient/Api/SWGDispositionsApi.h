#import <Foundation/Foundation.h>
#import "SWGDispositionCount.h"
#import "SWGDispositionResource.h"
#import "SWGPageResourceDispositionResource_.h"
#import "SWGApi.h"

/**
* Knetik Platform API Documentation Latest
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
*
* OpenAPI spec version: Latest
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGDispositionsApi: NSObject <SWGApi>

extern NSString* kSWGDispositionsApiErrorDomain;
extern NSInteger kSWGDispositionsApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Add a new disposition. 
///
/// @param disposition The new disposition record (optional)
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGDispositionResource*
-(NSNumber*) addDispositionUsingPOSTWithDisposition: (SWGDispositionResource*) disposition
    completionHandler: (void (^)(SWGDispositionResource* output, NSError* error)) handler;

/// Delete a disposition
///
/// @param _id The id of the disposition record
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
-(NSNumber*) deleteDispositionUsingDELETEWithId: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;

/// Returns a list of disposition counts
///
/// @param filterContext Filter for dispositions within a context type (games, articles, polls, etc). Optionally with a specific id like filter_context=video:47 (optional)
/// @param filterOwner Filter for dispositions from a specific user by id or 'me' (optional)
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return NSArray<SWGDispositionCount>*
-(NSNumber*) getDispositionCountUsingGETWithFilterContext: (NSString*) filterContext
    filterOwner: (NSString*) filterOwner
    completionHandler: (void (^)(NSArray<SWGDispositionCount>* output, NSError* error)) handler;

/// Returns a disposition
///
/// @param _id The id of the disposition record
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGDispositionResource*
-(NSNumber*) getDispositionUsingGETWithId: (NSNumber*) _id
    completionHandler: (void (^)(SWGDispositionResource* output, NSError* error)) handler;

/// Returns a page of dispositions
///
/// @param filterContext Filter for dispositions within a context type (games, articles, polls, etc). Optionally with a specific id like filter_context=video:47 (optional)
/// @param filterOwner Filter for dispositions from a specific user by id or 'me' (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGPageResourceDispositionResource_*
-(NSNumber*) getDispositionsUsingGETWithFilterContext: (NSString*) filterContext
    filterOwner: (NSString*) filterOwner
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(SWGPageResourceDispositionResource_* output, NSError* error)) handler;


@end
