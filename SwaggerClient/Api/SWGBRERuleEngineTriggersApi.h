#import <Foundation/Foundation.h>
#import "SWGBreTriggerResource.h"
#import "SWGPageBreTriggerResource_.h"
#import "SWGApi.h"

/**
* Knetik Platform API Documentation Latest
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
*
* OpenAPI spec version: Latest
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGBRERuleEngineTriggersApi: NSObject <SWGApi>

extern NSString* kSWGBRERuleEngineTriggersApiErrorDomain;
extern NSInteger kSWGBRERuleEngineTriggersApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Create a trigger
/// Customer added triggers will not be fired automatically or have rules associated with them by default. Custom rules must be added to get use from the trigger and it must then be fired from the outside. See the Bre Event services
///
/// @param breTriggerResource The BRE trigger resource object (optional)
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGBreTriggerResource*
-(NSNumber*) createTriggerUsingPOSTWithBreTriggerResource: (SWGBreTriggerResource*) breTriggerResource
    completionHandler: (void (^)(SWGBreTriggerResource* output, NSError* error)) handler;

/// Delete a trigger
/// May fail if there are existing rules against it. Cannot delete core triggers
///
/// @param eventName The trigger event name
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
-(NSNumber*) deleteTriggerUsingDELETEWithEventName: (NSString*) eventName
    completionHandler: (void (^)(NSError* error)) handler;

/// Get a single trigger
///
/// @param eventName The trigger event name
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGBreTriggerResource*
-(NSNumber*) getTriggerUsingGETWithEventName: (NSString*) eventName
    completionHandler: (void (^)(SWGBreTriggerResource* output, NSError* error)) handler;

/// List triggers
///
/// @param filterSystem Filter for triggers that are system triggers when true, or not when false. Leave off for both mixed (optional)
/// @param filterCategory Filter for triggers that are within a specific category (optional)
/// @param filterName Filter for triggers that have names containing the given string (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGPageBreTriggerResource_*
-(NSNumber*) getTriggersUsingGETWithFilterSystem: (NSNumber*) filterSystem
    filterCategory: (NSString*) filterCategory
    filterName: (NSString*) filterName
    size: (NSNumber*) size
    page: (NSNumber*) page
    completionHandler: (void (^)(SWGPageBreTriggerResource_* output, NSError* error)) handler;

/// Update a trigger
/// May fail if new parameters mismatch requirements of existing rules. Cannot update core triggers
///
/// @param eventName The trigger event name
/// @param breTriggerResource The BRE trigger resource object (optional)
///  code:201 message:"Created",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
-(NSNumber*) updateTriggerUsingPUTWithEventName: (NSString*) eventName
    breTriggerResource: (SWGBreTriggerResource*) breTriggerResource
    completionHandler: (void (^)(NSError* error)) handler;


@end
