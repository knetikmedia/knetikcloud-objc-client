#import <Foundation/Foundation.h>
#import "SWGCart.h"
#import "SWGCartItemRequest.h"
#import "SWGCartShippableResponse.h"
#import "SWGCartShippingAddressRequest.h"
#import "SWGPageCartSummary_.h"
#import "SWGSampleCountriesResponse.h"
#import "SWGSkuRequest.h"
#import "SWGApi.h"

/**
* Knetik Platform API Documentation Latest
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
*
* OpenAPI spec version: Latest
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGStoreShoppingCartsApi: NSObject <SWGApi>

extern NSString* kSWGStoreShoppingCartsApiErrorDomain;
extern NSInteger kSWGStoreShoppingCartsApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Adds a coupon to the cart
///
/// @param _id The id of the cart
/// @param skuRequest The request of the sku (optional)
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
-(NSNumber*) addDiscountUsingPOSTWithId: (NSString*) _id
    skuRequest: (SWGSkuRequest*) skuRequest
    completionHandler: (void (^)(NSError* error)) handler;

/// Add an item to the cart
/// Currently, carts cannot contain virtual and real currency items at the same time. Furthermore, the API only support a single virtual item at the moment
///
/// @param _id The id of the cart
/// @param cartItemRequest The cart item request object (optional)
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
-(NSNumber*) addItemUsingPOSTWithId: (NSString*) _id
    cartItemRequest: (SWGCartItemRequest*) cartItemRequest
    completionHandler: (void (^)(NSError* error)) handler;

/// Sets the owner of a cart if none is set already
///
/// @param _id The id of the cart
/// @param userId The id of the user (optional)
///  code:201 message:"Created",
///  code:202 message:"Accepted",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
-(NSNumber*) assignCartUsingPUTWithId: (NSString*) _id
    userId: (NSNumber*) userId
    completionHandler: (void (^)(NSError* error)) handler;

/// Returns whether a cart requires shipping
///
/// @param _id The id of the cart
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGCartShippableResponse*
-(NSNumber*) checkShippableUsingGETWithId: (NSString*) _id
    completionHandler: (void (^)(SWGCartShippableResponse* output, NSError* error)) handler;

/// Creates a new cart from scratch
/// You don't have to have a user to create a cart but the API requires authentication to checkout
///
/// @param owner Set the owner of a cart. If not specified, defaults to the calling user's id. If specified and is not the calling user's id, SHOPPING_CARTS_ADMIN permission is required (optional)
/// @param currencyCode Set the currency for the cart, by currency code. May be disallowed by site settings. (optional)
///  code:200 message:"the cart has been created, use the returned GUID to manage the cart",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return NSString*
-(NSNumber*) createCartUsingPOSTWithOwner: (NSNumber*) owner
    currencyCode: (NSString*) currencyCode
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;

/// Returns the cart with the given GUID
///
/// @param _id The id of the cart
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGCart*
-(NSNumber*) getCartUsingGETWithId: (NSString*) _id
    completionHandler: (void (^)(SWGCart* output, NSError* error)) handler;

/// Get the list of available shipping countries per vendor
/// Since a cart can have multiple vendors with different shipping options, the countries are broken down by vendors. Please see notes about the response object as the fields are variable.
///
/// @param _id The id of the cart
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGSampleCountriesResponse*
-(NSNumber*) getCountriesUsingGETWithId: (NSString*) _id
    completionHandler: (void (^)(SWGSampleCountriesResponse* output, NSError* error)) handler;

/// Modifies or sets the order shipping address
///
/// @param _id The id of the cart
/// @param cartShippingAddressRequest The cart shipping address request object (optional)
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
-(NSNumber*) modifyShippingAddressUsingPUTWithId: (NSString*) _id
    cartShippingAddressRequest: (SWGCartShippingAddressRequest*) cartShippingAddressRequest
    completionHandler: (void (^)(NSError* error)) handler;

/// Removes a coupon from the cart
///
/// @param _id The id of the cart
/// @param code The SKU code of the coupon to remove
///  code:200 message:"OK",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
-(NSNumber*) removeDiscountUsingDELETEWithId: (NSString*) _id
    code: (NSString*) code
    completionHandler: (void (^)(NSError* error)) handler;

/// Get a list of carts
///
/// @param filterOwnerId Filter by the id of the owner (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGPageCartSummary_*
-(NSNumber*) searchCartsUsingGETWithFilterOwnerId: (NSNumber*) filterOwnerId
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(SWGPageCartSummary_* output, NSError* error)) handler;

/// Sets the currency to use for the cart
/// May be disallowed by site settings.
///
/// @param _id The id of the cart
/// @param currencyCode The code of the currency (optional)
///  code:201 message:"Created",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
-(NSNumber*) setCartCurrencyUsingPUTWithId: (NSString*) _id
    currencyCode: (NSString*) currencyCode
    completionHandler: (void (^)(NSError* error)) handler;

/// Changes the quantity of an item already in the cart
/// A quantity of zero will remove the item from the cart altogether.
///
/// @param _id The id of the cart
/// @param cartItemRequest The cart item request object (optional)
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
-(NSNumber*) updateItemUsingPUTWithId: (NSString*) _id
    cartItemRequest: (SWGCartItemRequest*) cartItemRequest
    completionHandler: (void (^)(NSError* error)) handler;


@end
