#import <Foundation/Foundation.h>
#import "SWGCategoryResource.h"
#import "SWGPageCategoryResource_.h"
#import "SWGPageString_.h"
#import "SWGPageTemplateResource_.h"
#import "SWGTemplateResource.h"
#import "SWGApi.h"

/**
* Knetik Platform API Documentation Latest
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
*
* OpenAPI spec version: Latest
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGCategoriesApi: NSObject <SWGApi>

extern NSString* kSWGCategoriesApiErrorDomain;
extern NSInteger kSWGCategoriesApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Create a new category
/// 
///
/// @param category The category to create (optional)
/// 
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGCategoryResource*
-(NSNumber*) createCategoryUsingPOSTWithCategory: (SWGCategoryResource*) category
    completionHandler: (void (^)(SWGCategoryResource* output, NSError* error)) handler;


/// Create a category template
/// Templates define a type of category and the properties they have
///
/// @param template The template to create (optional)
/// 
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGTemplateResource*
-(NSNumber*) createTemplateUsingPOST2WithTemplate: (SWGTemplateResource*) template
    completionHandler: (void (^)(SWGTemplateResource* output, NSError* error)) handler;


/// Delete an existing category
/// 
///
/// @param _id The id of the category to be deleted
/// 
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return 
-(NSNumber*) deleteCategoryUsingDELETEWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a category template
/// If cascade = 'detach', it will force delete the template even if it's attached to other objects
///
/// @param _id The id of the template
/// @param cascade The value needed to delete used templates (optional)
/// 
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
///
/// @return 
-(NSNumber*) deleteTemplateUsingDELETE1WithId: (NSString*) _id
    cascade: (NSString*) cascade
    completionHandler: (void (^)(NSError* error)) handler;


/// List and search category templates
/// 
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to 1)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGPageTemplateResource_*
-(NSNumber*) getArticleTemplatesUsingGET1WithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(SWGPageTemplateResource_* output, NSError* error)) handler;


/// List and search categories with optional filters
/// 
///
/// @param filterSearch Filter for categories whose names begin with provided string (optional)
/// @param filterActive Filter for categories that are specifically active or inactive (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to 1)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGPageCategoryResource_*
-(NSNumber*) getCategoriesUsingGET1WithFilterSearch: (NSString*) filterSearch
    filterActive: (NSNumber*) filterActive
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(SWGPageCategoryResource_* output, NSError* error)) handler;


/// Get a single category
/// 
///
/// @param _id The id of the category to retrieve
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGCategoryResource*
-(NSNumber*) getCategoryUsingGET1WithId: (NSString*) _id
    completionHandler: (void (^)(SWGCategoryResource* output, NSError* error)) handler;


/// List all trivia tags in the system
/// 
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to 1)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGPageString_*
-(NSNumber*) getTagsUsingGETWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(SWGPageString_* output, NSError* error)) handler;


/// Get a single category template
/// 
///
/// @param _id The id of the template
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGTemplateResource*
-(NSNumber*) getTemplateUsingGET1WithId: (NSString*) _id
    completionHandler: (void (^)(SWGTemplateResource* output, NSError* error)) handler;


/// Update an existing category
/// 
///
/// @param _id The id of the category
/// @param category The category to update (optional)
/// 
///  code:201 message:"Created",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return 
-(NSNumber*) updateCategoryUsingPUT1WithId: (NSString*) _id
    category: (SWGCategoryResource*) category
    completionHandler: (void (^)(NSError* error)) handler;


/// Update a category template
/// 
///
/// @param _id The id of the template
/// @param template The updated template information (optional)
/// 
///  code:201 message:"Created",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return 
-(NSNumber*) updateTemplateUsingPUT2WithId: (NSString*) _id
    template: (SWGTemplateResource*) template
    completionHandler: (void (^)(NSError* error)) handler;



@end
