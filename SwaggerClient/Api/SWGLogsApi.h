#import <Foundation/Foundation.h>
#import "SWGBreEventLog.h"
#import "SWGForwardLog.h"
#import "SWGPageResourceBreEventLog_.h"
#import "SWGPageResourceForwardLog_.h"
#import "SWGPageResourceUserActionLog_.h"
#import "SWGUserActionLog.h"
#import "SWGApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGLogsApi: NSObject <SWGApi>

extern NSString* kSWGLogsApiErrorDomain;
extern NSInteger kSWGLogsApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Add a user log entry
/// 
///
/// @param logEntry The user log entry to be added (optional)
/// 
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return 
-(NSURLSessionTask*) addUserLogWithLogEntry: (SWGUserActionLog*) logEntry
    completionHandler: (void (^)(NSError* error)) handler;


/// Get an existing BRE event log entry by id
/// 
///
/// @param _id The BRE event log entry id
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGBreEventLog*
-(NSURLSessionTask*) getBREEventLogWithId: (NSString*) _id
    completionHandler: (void (^)(SWGBreEventLog* output, NSError* error)) handler;


/// Returns a list of BRE event log entries
/// 
///
/// @param filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the event log start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
/// @param filterEventName Filter event logs by event name (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:DESC)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGPageResourceBreEventLog_*
-(NSURLSessionTask*) getBREEventLogsWithFilterStartDate: (NSString*) filterStartDate
    filterEventName: (NSString*) filterEventName
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(SWGPageResourceBreEventLog_* output, NSError* error)) handler;


/// Get an existing forward log entry by id
/// 
///
/// @param _id The forward log entry id
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGForwardLog*
-(NSURLSessionTask*) getBREForwardLogWithId: (NSString*) _id
    completionHandler: (void (^)(SWGForwardLog* output, NSError* error)) handler;


/// Returns a list of forward log entries
/// 
///
/// @param filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
/// @param filterEndDate A comma separated string without spaces.  First value is the operator to search on, second value is the log end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
/// @param filterStatusCode Filter forward logs by http status code (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:DESC)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGPageResourceForwardLog_*
-(NSURLSessionTask*) getBREForwardLogsWithFilterStartDate: (NSString*) filterStartDate
    filterEndDate: (NSString*) filterEndDate
    filterStatusCode: (NSNumber*) filterStatusCode
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(SWGPageResourceForwardLog_* output, NSError* error)) handler;


/// Returns a user log entry by id
/// 
///
/// @param _id The user log entry id
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGUserActionLog*
-(NSURLSessionTask*) getUserLogWithId: (NSString*) _id
    completionHandler: (void (^)(SWGUserActionLog* output, NSError* error)) handler;


/// Returns a page of user logs entries
/// 
///
/// @param filterUser Filter for actions taken by a specific user by id (optional)
/// @param filterActionName Filter for actions of a specific name (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// 
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return SWGPageResourceUserActionLog_*
-(NSURLSessionTask*) getUserLogsWithFilterUser: (NSNumber*) filterUser
    filterActionName: (NSString*) filterActionName
    size: (NSNumber*) size
    page: (NSNumber*) page
    completionHandler: (void (^)(SWGPageResourceUserActionLog_* output, NSError* error)) handler;



@end
