#import <Foundation/Foundation.h>
#import "SWGChallengeActivityResource.h"
#import "SWGChallengeEventResource.h"
#import "SWGChallengeResource.h"
#import "SWGPageResourceBareChallengeActivityResource_.h"
#import "SWGPageResourceChallengeEventResource_.h"
#import "SWGPageResourceChallengeResource_.h"
#import "SWGPageResourceTemplateResource_.h"
#import "SWGTemplateResource.h"
#import "SWGApi.h"

/**
* Knetik Platform API Documentation Latest
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
*
* OpenAPI spec version: Latest
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGCampaignsChallengesApi: NSObject <SWGApi>

extern NSString* kSWGCampaignsChallengesApiErrorDomain;
extern NSInteger kSWGCampaignsChallengesApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Create a challenge activity
///
/// @param challengeId The challenge id
/// @param challengeActivityResource The challenge activity resource object (optional)
/// @param validateSettings Whether to validate the settings being sent against the available settings on the base activity. (optional) (default to false)
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGChallengeActivityResource*
-(NSNumber*) createChallengeActivityUsingPOSTWithChallengeId: (NSNumber*) challengeId
    challengeActivityResource: (SWGChallengeActivityResource*) challengeActivityResource
    validateSettings: (NSNumber*) validateSettings
    completionHandler: (void (^)(SWGChallengeActivityResource* output, NSError* error)) handler;

/// Create a challenge template
/// Challenge Templates define a type of challenge and the properties they have
///
/// @param challengeTemplateResource The challenge template resource object (optional)
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGTemplateResource*
-(NSNumber*) createChallengeTemplateUsingPOSTWithChallengeTemplateResource: (SWGTemplateResource*) challengeTemplateResource
    completionHandler: (void (^)(SWGTemplateResource* output, NSError* error)) handler;

/// Create a challenge
/// Challenges do not run on their own.  They must be added to a campaign before events will spawn.
///
/// @param challengeResource The challenge resource object (optional)
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGChallengeResource*
-(NSNumber*) createChallengeUsingPOSTWithChallengeResource: (SWGChallengeResource*) challengeResource
    completionHandler: (void (^)(SWGChallengeResource* output, NSError* error)) handler;

/// Delete a challenge activity
///
/// @param activityId The activity id
/// @param challengeId The challenge id
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
-(NSNumber*) deleteChallengeActivityUsingDELETEWithActivityId: (NSNumber*) activityId
    challengeId: (NSNumber*) challengeId
    completionHandler: (void (^)(NSError* error)) handler;

/// Delete a challenge event
///
/// @param _id The challenge event id
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
-(NSNumber*) deleteChallengeEventUsingDELETEWithId: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;

/// Delete a challenge template
/// If cascade = 'detach', it will force delete the template even if it's attached to other objects
///
/// @param _id The id of the template
/// @param cascade The value needed to delete used templates (optional)
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
-(NSNumber*) deleteChallengeTemplateUsingDELETEWithId: (NSString*) _id
    cascade: (NSString*) cascade
    completionHandler: (void (^)(NSError* error)) handler;

/// Delete a challenge
///
/// @param _id The challenge id
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden"
-(NSNumber*) deleteChallengeUsingDELETEWithId: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;

/// List and search challenge activities
///
/// @param challengeId The challenge id
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGPageResourceBareChallengeActivityResource_*
-(NSNumber*) getActivitiesUsingGET1WithChallengeId: (NSNumber*) challengeId
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(SWGPageResourceBareChallengeActivityResource_* output, NSError* error)) handler;

/// Get a single challenge activity
///
/// @param activityId The activity id
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGChallengeActivityResource*
-(NSNumber*) getChallengeActivityUsingGETWithActivityId: (NSNumber*) activityId
    completionHandler: (void (^)(SWGChallengeActivityResource* output, NSError* error)) handler;

/// Retrieve a single challenge event details
///
/// @param _id The challenge event id
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGChallengeEventResource*
-(NSNumber*) getChallengeEventUsingGETWithId: (NSNumber*) _id
    completionHandler: (void (^)(SWGChallengeEventResource* output, NSError* error)) handler;

/// Retrieve a list of challenge events
///
/// @param filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the event start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
/// @param filterEndDate A comma separated string without spaces.  First value is the operator to search on, second value is the event end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
/// @param filterCampaigns check only for events from currently running campaigns (optional)
/// @param filterChallenge check only for events from the challenge specified by id (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGPageResourceChallengeEventResource_*
-(NSNumber*) getChallengeEventssUsingGETWithFilterStartDate: (NSString*) filterStartDate
    filterEndDate: (NSString*) filterEndDate
    filterCampaigns: (NSNumber*) filterCampaigns
    filterChallenge: (NSNumber*) filterChallenge
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(SWGPageResourceChallengeEventResource_* output, NSError* error)) handler;

/// Get a single challenge template
///
/// @param _id The id of the template
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGTemplateResource*
-(NSNumber*) getChallengeTemplateUsingGETWithId: (NSString*) _id
    completionHandler: (void (^)(SWGTemplateResource* output, NSError* error)) handler;

/// List and search challenge templates
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGPageResourceTemplateResource_*
-(NSNumber*) getChallengeTemplatesUsingGETWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(SWGPageResourceTemplateResource_* output, NSError* error)) handler;

/// Retrieve a single challenge details
///
/// @param _id The challenge id
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGChallengeResource*
-(NSNumber*) getChallengeUsingGETWithId: (NSNumber*) _id
    completionHandler: (void (^)(SWGChallengeResource* output, NSError* error)) handler;

/// Retrieve a list of challenges
///
/// @param filterTemplate Filter for challenges that are not tied to campaigns (templates) (optional)
/// @param filterActiveCampaign Filter for challenges that are tied to active campaigns (optional)
///  code:200 message:"OK",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGPageResourceChallengeResource_*
-(NSNumber*) getChallengesUsingGET1WithFilterTemplate: (NSNumber*) filterTemplate
    filterActiveCampaign: (NSNumber*) filterActiveCampaign
    completionHandler: (void (^)(SWGPageResourceChallengeResource_* output, NSError* error)) handler;

/// Update a challenge activity
///
/// @param activityId The activity id
/// @param challengeId The challenge id
/// @param challengeActivityResource The challenge activity resource object (optional)
///  code:201 message:"Created",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
-(NSNumber*) updateChallengeActivityUsingPUTWithActivityId: (NSNumber*) activityId
    challengeId: (NSNumber*) challengeId
    challengeActivityResource: (SWGChallengeActivityResource*) challengeActivityResource
    completionHandler: (void (^)(NSError* error)) handler;

/// Update a challenge template
///
/// @param _id The id of the template
/// @param challengeTemplateResource The challenge template resource object (optional)
///  code:201 message:"Created",
///  code:204 message:"No Content",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
-(NSNumber*) updateChallengeTemplateUsingPUTWithId: (NSString*) _id
    challengeTemplateResource: (SWGTemplateResource*) challengeTemplateResource
    completionHandler: (void (^)(NSError* error)) handler;

/// Update a challenge's information
/// If the challenge is a copy, changes will propagate to all the related challenges
///
/// @param _id The challenge id
/// @param challengeResource The challenge resource object (optional)
///  code:200 message:"OK",
///  code:201 message:"Created",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
/// @return SWGChallengeResource*
-(NSNumber*) updateChallengeUsingPUTWithId: (NSNumber*) _id
    challengeResource: (SWGChallengeResource*) challengeResource
    completionHandler: (void (^)(SWGChallengeResource* output, NSError* error)) handler;


@end
