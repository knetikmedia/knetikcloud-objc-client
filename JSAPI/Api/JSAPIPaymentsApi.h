#import <Foundation/Foundation.h>
#import "JSAPIPageResourcePaymentMethodTypeResource_.h"
#import "JSAPIPaymentAuthorizationResource.h"
#import "JSAPIPaymentMethodResource.h"
#import "JSAPIPaymentMethodTypeResource.h"
#import "JSAPIResult.h"
#import "JSAPIApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface JSAPIPaymentsApi: NSObject <JSAPIApi>

extern NSString* kJSAPIPaymentsApiErrorDomain;
extern NSInteger kJSAPIPaymentsApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(JSAPIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create a new payment method for a user
/// <b>Permissions Needed:</b> PAYMENTS_ADMIN or owner
///
/// @param userId ID of the user for whom the payment method is being created
/// @param paymentMethod Payment method being created (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPaymentMethodResource*
-(NSURLSessionTask*) createPaymentMethodWithUserId: (NSNumber*) userId
    paymentMethod: (JSAPIPaymentMethodResource*) paymentMethod
    completionHandler: (void (^)(JSAPIPaymentMethodResource* output, NSError* error)) handler;


/// Delete an existing payment method for a user
/// <b>Permissions Needed:</b> PAYMENTS_ADMIN or owner
///
/// @param userId ID of the user for whom the payment method is being updated
/// @param _id ID of the payment method being deleted
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deletePaymentMethodWithUserId: (NSNumber*) userId
    _id: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Get a single payment method for a user
/// <b>Permissions Needed:</b> PAYMENTS_ADMIN or owner
///
/// @param userId ID of the user for whom the payment method is being retrieved
/// @param _id ID of the payment method being retrieved
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPaymentMethodResource*
-(NSURLSessionTask*) getPaymentMethodWithUserId: (NSNumber*) userId
    _id: (NSNumber*) _id
    completionHandler: (void (^)(JSAPIPaymentMethodResource* output, NSError* error)) handler;


/// Get a single payment method type
/// <b>Permissions Needed:</b> ANY
///
/// @param _id ID of the payment method type being retrieved
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPaymentMethodTypeResource*
-(NSURLSessionTask*) getPaymentMethodTypeWithId: (NSNumber*) _id
    completionHandler: (void (^)(JSAPIPaymentMethodTypeResource* output, NSError* error)) handler;


/// Get all payment method types
/// <b>Permissions Needed:</b> ANY
///
/// @param filterName Filter for payment method types whose name matches a given string (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourcePaymentMethodTypeResource_*
-(NSURLSessionTask*) getPaymentMethodTypesWithFilterName: (NSString*) filterName
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourcePaymentMethodTypeResource_* output, NSError* error)) handler;


/// Get all payment methods for a user
/// <b>Permissions Needed:</b> PAYMENTS_ADMIN or owner
///
/// @param userId ID of the user for whom the payment methods are being retrieved
/// @param filterName Filter for payment methods whose name starts with a given string (optional)
/// @param filterPaymentType Filter for payment methods with a specific payment type (optional)
/// @param filterPaymentMethodTypeId Filter for payment methods with a specific payment method type by id (optional)
/// @param filterPaymentMethodTypeName Filter for payment methods whose payment method type name starts with a given string (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSArray<JSAPIPaymentMethodResource>*
-(NSURLSessionTask*) getPaymentMethodsWithUserId: (NSNumber*) userId
    filterName: (NSString*) filterName
    filterPaymentType: (NSString*) filterPaymentType
    filterPaymentMethodTypeId: (NSNumber*) filterPaymentMethodTypeId
    filterPaymentMethodTypeName: (NSString*) filterPaymentMethodTypeName
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(NSArray<JSAPIPaymentMethodResource>* output, NSError* error)) handler;


/// Authorize payment of an invoice for later capture
/// <b>Permissions Needed:</b> PAYMENTS_ADMIN or PAYMENTS_USER
///
/// @param request Payment authorization request (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPaymentAuthorizationResource*
-(NSURLSessionTask*) paymentAuthorizationWithRequest: (JSAPIPaymentAuthorizationResource*) request
    completionHandler: (void (^)(JSAPIPaymentAuthorizationResource* output, NSError* error)) handler;


/// Capture an existing invoice payment authorization
/// <b>Permissions Needed:</b> PAYMENTS_ADMIN
///
/// @param _id ID of the payment authorization to capture
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) paymentCaptureWithId: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Update an existing payment method for a user
/// <b>Permissions Needed:</b> PAYMENTS_ADMIN or owner
///
/// @param userId ID of the user for whom the payment method is being updated
/// @param _id ID of the payment method being updated
/// @param paymentMethod The updated payment method data (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPaymentMethodResource*
-(NSURLSessionTask*) updatePaymentMethodWithUserId: (NSNumber*) userId
    _id: (NSNumber*) _id
    paymentMethod: (JSAPIPaymentMethodResource*) paymentMethod
    completionHandler: (void (^)(JSAPIPaymentMethodResource* output, NSError* error)) handler;



@end
