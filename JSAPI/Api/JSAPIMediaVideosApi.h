#import <Foundation/Foundation.h>
#import "JSAPICommentResource.h"
#import "JSAPIContributionResource.h"
#import "JSAPIDispositionResource.h"
#import "JSAPIFlagResource.h"
#import "JSAPIIntWrapper.h"
#import "JSAPIPageResourceCommentResource_.h"
#import "JSAPIPageResourceDispositionResource_.h"
#import "JSAPIPageResourceTemplateResource_.h"
#import "JSAPIPageResourceVideoRelationshipResource_.h"
#import "JSAPIPageResourceVideoResource_.h"
#import "JSAPIResult.h"
#import "JSAPIStringWrapper.h"
#import "JSAPITemplateResource.h"
#import "JSAPIVideoRelationshipResource.h"
#import "JSAPIVideoResource.h"
#import "JSAPIApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface JSAPIMediaVideosApi: NSObject <JSAPIApi>

extern NSString* kJSAPIMediaVideosApiErrorDomain;
extern NSInteger kJSAPIMediaVideosApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(JSAPIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Adds a user to a video's whitelist
/// Whitelisted users can view video regardless of privacy setting. <br><br><b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param _id The video id
/// @param userId The user id (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) addUserToVideoWhitelistWithId: (NSNumber*) _id
    userId: (JSAPIIntWrapper*) userId
    completionHandler: (void (^)(NSError* error)) handler;


/// Adds a new video in the system
/// <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param videoResource The video object (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIVideoResource*
-(NSURLSessionTask*) addVideoWithVideoResource: (JSAPIVideoResource*) videoResource
    completionHandler: (void (^)(JSAPIVideoResource* output, NSError* error)) handler;


/// Add a new video comment
/// <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param videoId The video id 
/// @param commentResource The comment object (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPICommentResource*
-(NSURLSessionTask*) addVideoCommentWithVideoId: (NSNumber*) videoId
    commentResource: (JSAPICommentResource*) commentResource
    completionHandler: (void (^)(JSAPICommentResource* output, NSError* error)) handler;


/// Adds a contributor to a video
/// <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param videoId The video id
/// @param contributionResource The contribution object (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) addVideoContributorWithVideoId: (NSNumber*) videoId
    contributionResource: (JSAPIContributionResource*) contributionResource
    completionHandler: (void (^)(NSError* error)) handler;


/// Add a new flag
/// <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param videoId The video id
/// @param reason The flag reason (optional)
/// 
///  code:202 message:"Accepted",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIFlagResource*
-(NSURLSessionTask*) addVideoFlagWithVideoId: (NSNumber*) videoId
    reason: (JSAPIStringWrapper*) reason
    completionHandler: (void (^)(JSAPIFlagResource* output, NSError* error)) handler;


/// Adds one or more existing videos as related to this one
/// <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param videoId The video id
/// @param videoRelationshipResource The video relationship object  (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIVideoRelationshipResource*
-(NSURLSessionTask*) addVideoRelationshipsWithVideoId: (NSNumber*) videoId
    videoRelationshipResource: (JSAPIVideoRelationshipResource*) videoRelationshipResource
    completionHandler: (void (^)(JSAPIVideoRelationshipResource* output, NSError* error)) handler;


/// Create a video disposition
/// <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param videoId The video id
/// @param dispositionResource The disposition object (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIDispositionResource*
-(NSURLSessionTask*) createVideoDispositionWithVideoId: (NSNumber*) videoId
    dispositionResource: (JSAPIDispositionResource*) dispositionResource
    completionHandler: (void (^)(JSAPIDispositionResource* output, NSError* error)) handler;


/// Create a video template
/// Video Templates define a type of video and the properties they have. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param videoTemplateResource The video template resource object (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) createVideoTemplateWithVideoTemplateResource: (JSAPITemplateResource*) videoTemplateResource
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// Deletes a video from the system if no resources are attached to it
/// <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param _id The video id
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteVideoWithId: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a video comment
/// <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param videoId The video id
/// @param _id The comment id
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteVideoCommentWithVideoId: (NSNumber*) videoId
    _id: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a video disposition
/// <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param dispositionId The disposition id
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteVideoDispositionWithDispositionId: (NSNumber*) dispositionId
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a flag
/// <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param videoId The video id
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteVideoFlagWithVideoId: (NSNumber*) videoId
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a video's relationship
/// <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param videoId The video id
/// @param _id The relationship id
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteVideoRelationshipWithVideoId: (NSNumber*) videoId
    _id: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a video template
/// If cascade = 'detach', it will force delete the template even if it's attached to other objects. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param cascade The value needed to delete used templates (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteVideoTemplateWithId: (NSString*) _id
    cascade: (NSString*) cascade
    completionHandler: (void (^)(NSError* error)) handler;


/// Get user videos
/// <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param userId The user id
/// @param excludeFlagged Skip videos that have been flagged by the current user (optional) (default to true)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceVideoResource_*
-(NSURLSessionTask*) getUserVideosWithUserId: (NSNumber*) userId
    excludeFlagged: (NSNumber*) excludeFlagged
    size: (NSNumber*) size
    page: (NSNumber*) page
    completionHandler: (void (^)(JSAPIPageResourceVideoResource_* output, NSError* error)) handler;


/// Loads a specific video details
/// <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param _id The video id
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIVideoResource*
-(NSURLSessionTask*) getVideoWithId: (NSNumber*) _id
    completionHandler: (void (^)(JSAPIVideoResource* output, NSError* error)) handler;


/// Returns a page of comments for a video
/// <b>Permissions Needed:</b> ANY
///
/// @param videoId The video id
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceCommentResource_*
-(NSURLSessionTask*) getVideoCommentsWithVideoId: (NSNumber*) videoId
    size: (NSNumber*) size
    page: (NSNumber*) page
    completionHandler: (void (^)(JSAPIPageResourceCommentResource_* output, NSError* error)) handler;


/// Returns a page of dispositions for a video
/// <b>Permissions Needed:</b> ANY
///
/// @param videoId The video id
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceDispositionResource_*
-(NSURLSessionTask*) getVideoDispositionsWithVideoId: (NSNumber*) videoId
    size: (NSNumber*) size
    page: (NSNumber*) page
    completionHandler: (void (^)(JSAPIPageResourceDispositionResource_* output, NSError* error)) handler;


/// Returns a page of video relationships
/// <b>Permissions Needed:</b> ANY
///
/// @param videoId The video id
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceVideoRelationshipResource_*
-(NSURLSessionTask*) getVideoRelationshipsWithVideoId: (NSNumber*) videoId
    size: (NSNumber*) size
    page: (NSNumber*) page
    completionHandler: (void (^)(JSAPIPageResourceVideoRelationshipResource_* output, NSError* error)) handler;


/// Get a single video template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN or VIDEOS_ADMIN
///
/// @param _id The id of the template
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) getVideoTemplateWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// List and search video templates
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN or VIDEOS_ADMIN
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceTemplateResource_*
-(NSURLSessionTask*) getVideoTemplatesWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceTemplateResource_* output, NSError* error)) handler;


/// Search videos using the documented filters
/// <b>Permissions Needed:</b> ANY
///
/// @param excludeFlagged Skip videos that have been flagged by the current user (optional) (default to true)
/// @param filterVideosByUploader Filter for videos by uploader id (optional)
/// @param filterCategory Filter for videos from a specific category by id (optional)
/// @param filterTagset Filter for videos with specified tags (separated by comma) (optional)
/// @param filterVideosByName Filter for videos which name *STARTS* with the given string (optional)
/// @param filterVideosByContributor Filter for videos with contribution from the artist specified by ID (optional)
/// @param filterVideosByAuthor Filter for videos with an artist as author specified by ID (optional)
/// @param filterHasAuthor Filter for videos that have an author set if true, or that have no author if false (optional)
/// @param filterHasUploader Filter for videos that have an uploader set if true, or that have no uploader if false (optional)
/// @param filterRelatedTo Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well (optional)
/// @param filterFriends Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission) (optional)
/// @param filterDisposition Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to author:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceVideoResource_*
-(NSURLSessionTask*) getVideosWithExcludeFlagged: (NSNumber*) excludeFlagged
    filterVideosByUploader: (NSNumber*) filterVideosByUploader
    filterCategory: (NSString*) filterCategory
    filterTagset: (NSString*) filterTagset
    filterVideosByName: (NSString*) filterVideosByName
    filterVideosByContributor: (NSNumber*) filterVideosByContributor
    filterVideosByAuthor: (NSNumber*) filterVideosByAuthor
    filterHasAuthor: (NSNumber*) filterHasAuthor
    filterHasUploader: (NSNumber*) filterHasUploader
    filterRelatedTo: (NSString*) filterRelatedTo
    filterFriends: (NSNumber*) filterFriends
    filterDisposition: (NSString*) filterDisposition
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceVideoResource_* output, NSError* error)) handler;


/// Removes a user from a video's whitelist
/// Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting. <br><br><b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param videoId The video id
/// @param _id The user id
/// 
///  code:202 message:"Accepted",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) removeUserFromVideoWhitelistWithVideoId: (NSNumber*) videoId
    _id: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Removes a contributor from a video
/// <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param videoId The video id
/// @param _id The contributor id
/// 
///  code:202 message:"Accepted",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) removeVideoContributorWithVideoId: (NSNumber*) videoId
    _id: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Modifies a video's details
/// <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param _id The video id
/// @param videoResource The video object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) updateVideoWithId: (NSNumber*) _id
    videoResource: (JSAPIVideoResource*) videoResource
    completionHandler: (void (^)(NSError* error)) handler;


/// Update a video comment
/// <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param videoId The video id
/// @param _id The comment id
/// @param content The comment content (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) updateVideoCommentWithVideoId: (NSNumber*) videoId
    _id: (NSNumber*) _id
    content: (JSAPIStringWrapper*) content
    completionHandler: (void (^)(NSError* error)) handler;


/// Update a video's relationship details
/// <b>Permissions Needed:</b> VIDEOS_USER or VIDEOS_ADMIN
///
/// @param videoId The video id
/// @param relationshipId The relationship id
/// @param details The video relationship details (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) updateVideoRelationshipWithVideoId: (NSNumber*) videoId
    relationshipId: (NSNumber*) relationshipId
    details: (JSAPIStringWrapper*) details
    completionHandler: (void (^)(NSError* error)) handler;


/// Update a video template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param videoTemplateResource The video template resource object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) updateVideoTemplateWithId: (NSString*) _id
    videoTemplateResource: (JSAPITemplateResource*) videoTemplateResource
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// Increment a video's view count
/// <b>Permissions Needed:</b> ANY
///
/// @param _id The video id
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) viewVideoWithId: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;



@end
