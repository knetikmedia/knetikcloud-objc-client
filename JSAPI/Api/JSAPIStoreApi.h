#import <Foundation/Foundation.h>
#import "JSAPIBehaviorDefinitionResource.h"
#import "JSAPIInvoiceResource.h"
#import "JSAPIPageResourceStoreItemTemplateResource_.h"
#import "JSAPIPageResourceStoreItem_.h"
#import "JSAPIQuickBuyRequest.h"
#import "JSAPIResult.h"
#import "JSAPIStoreItem.h"
#import "JSAPIStoreItemTemplateResource.h"
#import "JSAPIApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface JSAPIStoreApi: NSObject <JSAPIApi>

extern NSString* kJSAPIStoreApiErrorDomain;
extern NSInteger kJSAPIStoreApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(JSAPIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create an item template
/// Item Templates define a type of item and the properties they have. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param itemTemplateResource The new item template (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIStoreItemTemplateResource*
-(NSURLSessionTask*) createItemTemplateWithItemTemplateResource: (JSAPIStoreItemTemplateResource*) itemTemplateResource
    completionHandler: (void (^)(JSAPIStoreItemTemplateResource* output, NSError* error)) handler;


/// Create a store item
/// SKUs have to be unique in the entire store. If a duplicate SKU is found, a 400 error is generated and the response will have a \"parameters\" field that is a list of duplicates. A duplicate is an object like {item_id, offending_sku_list}. Ex:<br /> {..., parameters: [[{item: 1, skus: [\"SKU-1\"]}]]}<br /> If an item is brand new and has duplicate SKUs within itself, the item ID will be 0.  Item subclasses are not allowed here, you will have to use their respective endpoints. <br><br><b>Permissions Needed:</b> STORE_ADMIN
///
/// @param cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional) (default to false)
/// @param storeItem The store item object (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIStoreItem*
-(NSURLSessionTask*) createStoreItemWithCascade: (NSNumber*) cascade
    storeItem: (JSAPIStoreItem*) storeItem
    completionHandler: (void (^)(JSAPIStoreItem* output, NSError* error)) handler;


/// Delete an item template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param cascade force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteItemTemplateWithId: (NSString*) _id
    cascade: (NSString*) cascade
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a store item
/// <b>Permissions Needed:</b> STORE_ADMIN
///
/// @param _id The id of the item
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteStoreItemWithId: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// List available item behaviors
/// <b>Permissions Needed:</b> ANY
///
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSArray<JSAPIBehaviorDefinitionResource>*
-(NSURLSessionTask*) getBehaviorsWithCompletionHandler: 
    (void (^)(NSArray<JSAPIBehaviorDefinitionResource>* output, NSError* error)) handler;


/// Get a single item template
/// Item Templates define a type of item and the properties they have. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIStoreItemTemplateResource*
-(NSURLSessionTask*) getItemTemplateWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPIStoreItemTemplateResource* output, NSError* error)) handler;


/// List and search item templates
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceStoreItemTemplateResource_*
-(NSURLSessionTask*) getItemTemplatesWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceStoreItemTemplateResource_* output, NSError* error)) handler;


/// Get a single store item
/// <b>Permissions Needed:</b> ANY
///
/// @param _id The id of the item
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIStoreItem*
-(NSURLSessionTask*) getStoreItemWithId: (NSNumber*) _id
    completionHandler: (void (^)(JSAPIStoreItem* output, NSError* error)) handler;


/// List and search store items
/// If called without permission STORE_ADMIN the only items marked displayable, whose start and end date are null or appropriate to the current date, and whose geo policy allows the caller's country will be returned. Similarly skus will be filtered, possibly resulting in an item returned with no skus the user can purchase. br><br><b>Permissions Needed:</b> ANY
///
/// @param filterNameSearch Filter for items whose name starts with a given string. (optional)
/// @param filterUniqueKey Filter for items whose unique_key is a given string. (optional)
/// @param filterPublished Filter for skus that have been published. (optional)
/// @param filterDisplayable Filter for items that are displayable. (optional)
/// @param filterStart A comma separated string without spaces.  First value is the operator to search on, second value is the store start date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
/// @param filterEnd A comma separated string without spaces.  First value is the operator to search on, second value is the store end date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
/// @param filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the sku start date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
/// @param filterStopDate A comma separated string without spaces.  First value is the operator to search on, second value is the sku end date, a unix timestamp in seconds.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
/// @param filterSku Filter for skus whose name starts with a given string. (optional)
/// @param filterPrice A colon separated string without spaces.  First value is the operator to search on, second value is the price of a sku.  Allowed operators: (LT, GT, LTE, GTE, EQ). (optional)
/// @param filterTag A comma separated list without spaces of the names of tags. Will only return items with at least one of the tags. (optional)
/// @param filterItemsByType Filter for item type based on its type hint. (optional)
/// @param filterBundledSkus Filter for skus inside bundles whose name starts with a given string.  Used only when type hint is &#39;bundle_item&#39; (optional)
/// @param filterVendor Filter for items from a given vendor, by id. (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceStoreItem_*
-(NSURLSessionTask*) getStoreItemsWithFilterNameSearch: (NSString*) filterNameSearch
    filterUniqueKey: (NSString*) filterUniqueKey
    filterPublished: (NSNumber*) filterPublished
    filterDisplayable: (NSNumber*) filterDisplayable
    filterStart: (NSString*) filterStart
    filterEnd: (NSString*) filterEnd
    filterStartDate: (NSString*) filterStartDate
    filterStopDate: (NSString*) filterStopDate
    filterSku: (NSString*) filterSku
    filterPrice: (NSString*) filterPrice
    filterTag: (NSString*) filterTag
    filterItemsByType: (NSString*) filterItemsByType
    filterBundledSkus: (NSString*) filterBundledSkus
    filterVendor: (NSNumber*) filterVendor
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceStoreItem_* output, NSError* error)) handler;


/// One-step purchase and pay for a single SKU item from a user's wallet
/// Used to create and automatically pay an invoice for a single unit of a single SKU from a user's wallet. SKU must be priced in virtual currency and must not be an item that requires shipping. PAYMENTS_ADMIN permission is required if user ID is specified and is not the ID of the currently logged in user. If invoice price does not match expected price, purchase is aborted. <br><br><b>Permissions Needed:</b> PAYMENTS_USER and owner, or PAYMENTS_ADMIN
///
/// @param quickBuyRequest Quick buy details (optional)
/// 
///  code:200 message:"Item has been purchased, invoice provided in response",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:409 message:"Invoice total does not match SKU price"
///
/// @return JSAPIInvoiceResource*
-(NSURLSessionTask*) quickBuyWithQuickBuyRequest: (JSAPIQuickBuyRequest*) quickBuyRequest
    completionHandler: (void (^)(JSAPIInvoiceResource* output, NSError* error)) handler;


/// Update an item template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param itemTemplateResource The item template resource object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIStoreItemTemplateResource*
-(NSURLSessionTask*) updateItemTemplateWithId: (NSString*) _id
    itemTemplateResource: (JSAPIStoreItemTemplateResource*) itemTemplateResource
    completionHandler: (void (^)(JSAPIStoreItemTemplateResource* output, NSError* error)) handler;


/// Update a store item
/// <b>Permissions Needed:</b> STORE_ADMIN
///
/// @param _id The id of the item
/// @param cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional) (default to false)
/// @param storeItem The store item object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIStoreItem*
-(NSURLSessionTask*) updateStoreItemWithId: (NSNumber*) _id
    cascade: (NSNumber*) cascade
    storeItem: (JSAPIStoreItem*) storeItem
    completionHandler: (void (^)(JSAPIStoreItem* output, NSError* error)) handler;



@end
