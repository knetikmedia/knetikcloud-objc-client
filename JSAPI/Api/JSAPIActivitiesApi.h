#import <Foundation/Foundation.h>
#import "JSAPIActivityOccurrenceCreationFailure.h"
#import "JSAPIActivityOccurrenceJoinResult.h"
#import "JSAPIActivityOccurrenceResource.h"
#import "JSAPIActivityOccurrenceResults.h"
#import "JSAPIActivityOccurrenceResultsResource.h"
#import "JSAPIActivityOccurrenceSettingsResource.h"
#import "JSAPIActivityResource.h"
#import "JSAPIActivityUserResource.h"
#import "JSAPICreateActivityOccurrenceRequest.h"
#import "JSAPIIntWrapper.h"
#import "JSAPIPageResourceActivityOccurrenceResource_.h"
#import "JSAPIPageResourceBareActivityResource_.h"
#import "JSAPIPageResourceTemplateResource_.h"
#import "JSAPIResult.h"
#import "JSAPITemplateResource.h"
#import "JSAPIValueWrapperString_.h"
#import "JSAPIApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface JSAPIActivitiesApi: NSObject <JSAPIApi>

extern NSString* kJSAPIActivitiesApiErrorDomain;
extern NSInteger kJSAPIActivitiesApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(JSAPIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Add a user to an occurrence
/// If called with no body, defaults to the user making the call.
///
/// @param activityOccurrenceId The id of the activity occurrence
/// @param test if true, indicates that the user should NOT be added. This can be used to test for eligibility (optional) (default to false)
/// @param bypassRestrictions if true, indicates that restrictions such as max player count should be ignored. Can only be used with ACTIVITIES_ADMIN (optional) (default to false)
/// @param userId The id of the user, or null for &#39;caller&#39; (optional)
/// 
///  code:201 message:"Sucessful creation",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Attempted to join an occurrence while missing required entitlement",
///  code:404 message:"Not Found"
///
/// @return JSAPIActivityOccurrenceResource*
-(NSURLSessionTask*) addUserWithActivityOccurrenceId: (NSNumber*) activityOccurrenceId
    test: (NSNumber*) test
    bypassRestrictions: (NSNumber*) bypassRestrictions
    userId: (JSAPIIntWrapper*) userId
    completionHandler: (void (^)(JSAPIActivityOccurrenceResource* output, NSError* error)) handler;


/// Create an activity
/// <b>Permissions Needed:</b> ACTIVITIES_ADMIN
///
/// @param activityResource The activity resource object (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIActivityResource*
-(NSURLSessionTask*) createActivityWithActivityResource: (JSAPIActivityResource*) activityResource
    completionHandler: (void (^)(JSAPIActivityResource* output, NSError* error)) handler;


/// Create a new activity occurrence. Ex: start a game
/// Has to enforce extra rules if not used as an admin. <br><br><b>Permissions Needed:</b> ACTIVITIES_USER or ACTIVITIES_ADMIN
///
/// @param test if true, indicates that the occurrence should NOT be created. This can be used to test for eligibility and valid settings (optional) (default to false)
/// @param activityOccurrenceResource The activity occurrence object (optional)
/// 
///  code:201 message:"Sucessful creation",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Attempted to set an admin only field (no 'result' returned), or missing an entitlement/wallet balance (result is an array of ActivityOccurrenceJoinResult explaining which users had what problems)",
///  code:404 message:"Not Found"
///
/// @return JSAPIActivityOccurrenceResource*
-(NSURLSessionTask*) createActivityOccurrenceWithTest: (NSNumber*) test
    activityOccurrenceResource: (JSAPICreateActivityOccurrenceRequest*) activityOccurrenceResource
    completionHandler: (void (^)(JSAPIActivityOccurrenceResource* output, NSError* error)) handler;


/// Create a activity template
/// Activity Templates define a type of activity and the properties they have. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param activityTemplateResource The activity template resource object (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) createActivityTemplateWithActivityTemplateResource: (JSAPITemplateResource*) activityTemplateResource
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// Delete an activity
/// <b>Permissions Needed:</b> ACTIVITIES_ADMIN
///
/// @param _id The id of the activity
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteActivityWithId: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a activity template
/// If cascade = 'detach', it will force delete the template even if it's attached to other objects. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param cascade The value needed to delete used templates (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteActivityTemplateWithId: (NSString*) _id
    cascade: (NSString*) cascade
    completionHandler: (void (^)(NSError* error)) handler;


/// List activity definitions
/// <b>Permissions Needed:</b> ANY
///
/// @param filterTemplate Filter for activities that are templates, or specifically not if false (optional)
/// @param filterName Filter for activities that have a name starting with specified string (optional)
/// @param filterId Filter for activities with an id in the given comma separated list of ids (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceBareActivityResource_*
-(NSURLSessionTask*) getActivitiesWithFilterTemplate: (NSNumber*) filterTemplate
    filterName: (NSString*) filterName
    filterId: (NSString*) filterId
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceBareActivityResource_* output, NSError* error)) handler;


/// Get a single activity
/// <b>Permissions Needed:</b> ANY
///
/// @param _id The id of the activity
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIActivityResource*
-(NSURLSessionTask*) getActivityWithId: (NSNumber*) _id
    completionHandler: (void (^)(JSAPIActivityResource* output, NSError* error)) handler;


/// Load a single activity occurrence details
/// <b>Permissions Needed:</b> ACTIVITIES_ADMIN
///
/// @param activityOccurrenceId The id of the activity occurrence
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIActivityOccurrenceResource*
-(NSURLSessionTask*) getActivityOccurrenceDetailsWithActivityOccurrenceId: (NSNumber*) activityOccurrenceId
    completionHandler: (void (^)(JSAPIActivityOccurrenceResource* output, NSError* error)) handler;


/// Get a single activity template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN or ACTIVITIES_ADMIN
///
/// @param _id The id of the template
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) getActivityTemplateWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// List and search activity templates
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN or ACTIVITIES_ADMIN
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceTemplateResource_*
-(NSURLSessionTask*) getActivityTemplatesWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceTemplateResource_* output, NSError* error)) handler;


/// List activity occurrences
/// <b>Permissions Needed:</b> ACTIVITIES_ADMIN
///
/// @param filterActivity Filter for occurrences of the given activity ID (optional)
/// @param filterStatus Filter for occurrences in the given status (optional)
/// @param filterEvent Filter for occurrences played during the given event (optional)
/// @param filterChallenge Filter for occurrences played within the given challenge (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceActivityOccurrenceResource_*
-(NSURLSessionTask*) listActivityOccurrencesWithFilterActivity: (NSString*) filterActivity
    filterStatus: (NSString*) filterStatus
    filterEvent: (NSNumber*) filterEvent
    filterChallenge: (NSNumber*) filterChallenge
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceActivityOccurrenceResource_* output, NSError* error)) handler;


/// Remove a user from an occurrence
/// 
///
/// @param activityOccurrenceId The id of the activity occurrence
/// @param userId The id of the user, or &#39;me&#39;
/// @param ban if true, indicates that the user should not be allowed to re-join. Can only be set by host or admin (optional) (default to false)
/// @param bypassRestrictions if true, indicates that restrictions such as current status should be ignored. Can only be used with ACTIVITIES_ADMIN (optional) (default to false)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) removeUserWithActivityOccurrenceId: (NSNumber*) activityOccurrenceId
    userId: (NSString*) userId
    ban: (NSNumber*) ban
    bypassRestrictions: (NSNumber*) bypassRestrictions
    completionHandler: (void (^)(NSError* error)) handler;


/// Sets the status of an activity occurrence to FINISHED and logs metrics
/// In addition to user permissions requirements there is security based on the core_settings.results_trust setting.
///
/// @param activityOccurrenceId The id of the activity occurrence
/// @param activityOccurrenceResults The activity occurrence object (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIActivityOccurrenceResults*
-(NSURLSessionTask*) setActivityOccurrenceResultsWithActivityOccurrenceId: (NSNumber*) activityOccurrenceId
    activityOccurrenceResults: (JSAPIActivityOccurrenceResultsResource*) activityOccurrenceResults
    completionHandler: (void (^)(JSAPIActivityOccurrenceResults* output, NSError* error)) handler;


/// Sets the settings of an activity occurrence
/// 
///
/// @param activityOccurrenceId The id of the activity occurrence
/// @param settings The new settings (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIActivityOccurrenceResource*
-(NSURLSessionTask*) setActivityOccurrenceSettingsWithActivityOccurrenceId: (NSNumber*) activityOccurrenceId
    settings: (JSAPIActivityOccurrenceSettingsResource*) settings
    completionHandler: (void (^)(JSAPIActivityOccurrenceResource* output, NSError* error)) handler;


/// Set a user's status within an occurrence
/// 
///
/// @param activityOccurrenceId The id of the activity occurrence
/// @param userId The id of the user
/// @param status The new status (optional)
/// 
///  code:202 message:"Accepted",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIActivityUserResource*
-(NSURLSessionTask*) setUserStatusWithActivityOccurrenceId: (NSNumber*) activityOccurrenceId
    userId: (NSString*) userId
    status: (NSString*) status
    completionHandler: (void (^)(JSAPIActivityUserResource* output, NSError* error)) handler;


/// Update an activity
/// <b>Permissions Needed:</b> ACTIVITIES_ADMIN
///
/// @param _id The id of the activity
/// @param activityResource The activity resource object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIActivityResource*
-(NSURLSessionTask*) updateActivityWithId: (NSNumber*) _id
    activityResource: (JSAPIActivityResource*) activityResource
    completionHandler: (void (^)(JSAPIActivityResource* output, NSError* error)) handler;


/// Update the status of an activity occurrence
/// If setting to 'FINISHED' reward will be run based on current metrics that have been recorded already. Alternatively, see results endpoint to finish and record all metrics at once. Can be called by non-host participants if non_host_status_control is true
///
/// @param activityOccurrenceId The id of the activity occurrence
/// @param activityOccurrenceStatus The activity occurrence status object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) updateActivityOccurrenceStatusWithActivityOccurrenceId: (NSNumber*) activityOccurrenceId
    activityOccurrenceStatus: (JSAPIValueWrapperString_*) activityOccurrenceStatus
    completionHandler: (void (^)(NSError* error)) handler;


/// Update an activity template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param activityTemplateResource The activity template resource object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) updateActivityTemplateWithId: (NSString*) _id
    activityTemplateResource: (JSAPITemplateResource*) activityTemplateResource
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;



@end
