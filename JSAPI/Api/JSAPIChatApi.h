#import <Foundation/Foundation.h>
#import "JSAPIChatBlacklistResource.h"
#import "JSAPIChatMessageResource.h"
#import "JSAPIPageResourceChatMessageResource_.h"
#import "JSAPIPageResourceChatUserThreadResource_.h"
#import "JSAPIResult.h"
#import "JSAPIApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface JSAPIChatApi: NSObject <JSAPIApi>

extern NSString* kJSAPIChatApiErrorDomain;
extern NSInteger kJSAPIChatApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(JSAPIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Acknowledge number of messages in a thread
/// <b>Permissions Needed:</b> owner
///
/// @param _id The thread id
/// @param readCount The amount of messages read (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) acknowledgeChatMessageWithId: (NSString*) _id
    readCount: (NSNumber*) readCount
    completionHandler: (void (^)(NSError* error)) handler;


/// Add a user to a chat message blacklist
/// <b>Permissions Needed:</b> CHAT_ADMIN or owner
///
/// @param blacklistedUserId The user id to blacklist
/// @param _id The user id or &#39;me&#39;
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) addChatMessageBlacklistWithBlacklistedUserId: (NSNumber*) blacklistedUserId
    _id: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a message
/// <b>Permissions Needed:</b> CHAT_ADMIN or owner
///
/// @param _id The message id
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteChatMessageWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Edit your message
/// <b>Permissions Needed:</b> owner
///
/// @param _id The message id
/// @param chatMessageResource The chat message resource (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) editChatMessageWithId: (NSString*) _id
    chatMessageResource: (JSAPIChatMessageResource*) chatMessageResource
    completionHandler: (void (^)(NSError* error)) handler;


/// Get a message
/// <b>Permissions Needed:</b> CHAT_ADMIN or owner
///
/// @param _id The message id
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIChatMessageResource*
-(NSURLSessionTask*) getChatMessageWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPIChatMessageResource* output, NSError* error)) handler;


/// Get a list of blocked users for chat messaging
/// <b>Permissions Needed:</b> CHAT_ADMIN or owner
///
/// @param _id The user id or &#39;me&#39;
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSArray<JSAPIChatBlacklistResource>*
-(NSURLSessionTask*) getChatMessageBlacklistWithId: (NSString*) _id
    completionHandler: (void (^)(NSArray<JSAPIChatBlacklistResource>* output, NSError* error)) handler;


/// List your threads
/// <b>Permissions Needed:</b> owner
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceChatUserThreadResource_*
-(NSURLSessionTask*) getChatThreadsWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceChatUserThreadResource_* output, NSError* error)) handler;


/// List messages with a user
/// <b>Permissions Needed:</b> owner
///
/// @param _id The user id
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceChatMessageResource_*
-(NSURLSessionTask*) getDirectMessagesWithId: (NSNumber*) _id
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceChatMessageResource_* output, NSError* error)) handler;


/// List messages in a thread
/// <b>Permissions Needed:</b> CHAT_ADMIN or owner
///
/// @param _id The thread id
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceChatMessageResource_*
-(NSURLSessionTask*) getThreadMessagesWithId: (NSString*) _id
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceChatMessageResource_* output, NSError* error)) handler;


/// List messages in a topic
/// <b>Permissions Needed:</b> CHAT_ADMIN or owner
///
/// @param _id The topic id
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceChatMessageResource_*
-(NSURLSessionTask*) getTopicMessagesWithId: (NSString*) _id
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceChatMessageResource_* output, NSError* error)) handler;


/// Remove a user from a blacklist
/// <b>Permissions Needed:</b> CHAT_ADMIN or owner
///
/// @param blacklistedUserId The user id to blacklist
/// @param _id The user id or &#39;me&#39;
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) removeChatBlacklistWithBlacklistedUserId: (NSNumber*) blacklistedUserId
    _id: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Send a message
/// <b>Permissions Needed:</b> ANY
///
/// @param chatMessageResource The chat message resource (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIChatMessageResource*
-(NSURLSessionTask*) sendChatMessageWithChatMessageResource: (JSAPIChatMessageResource*) chatMessageResource
    completionHandler: (void (^)(JSAPIChatMessageResource* output, NSError* error)) handler;



@end
