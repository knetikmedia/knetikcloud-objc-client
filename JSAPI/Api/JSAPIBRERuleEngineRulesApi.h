#import <Foundation/Foundation.h>
#import "JSAPIBooleanResource.h"
#import "JSAPIBreRule.h"
#import "JSAPIExpressionObject_.h"
#import "JSAPIPageResourceBreRule_.h"
#import "JSAPIResult.h"
#import "JSAPIApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface JSAPIBRERuleEngineRulesApi: NSObject <JSAPIApi>

extern NSString* kJSAPIBRERuleEngineRulesApiErrorDomain;
extern NSInteger kJSAPIBRERuleEngineRulesApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(JSAPIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create a rule
/// Rules define which actions to run when a given event verifies the specified condition. Full list of predicates and other type of expressions can be found at GET /bre/expressions/
///
/// @param breRule The BRE rule object (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIBreRule*
-(NSURLSessionTask*) createBRERuleWithBreRule: (JSAPIBreRule*) breRule
    completionHandler: (void (^)(JSAPIBreRule* output, NSError* error)) handler;


/// Delete a rule
/// May fail if there are existing rules against it. Cannot delete core rules
///
/// @param _id The id of the rule
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteBRERuleWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Returns a string representation of the provided expression
/// 
///
/// @param expression The expression (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSString*
-(NSURLSessionTask*) getBREExpressionAsStringWithExpression: (JSAPIExpressionObject_*) expression
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Get a single rule
/// 
///
/// @param _id The id of the rule
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIBreRule*
-(NSURLSessionTask*) getBRERuleWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPIBreRule* output, NSError* error)) handler;


/// List rules
/// 
///
/// @param filterName Filter for rules containing the given name (optional)
/// @param filterEnabled Filter for rules by active status, null for both (optional) (default to null)
/// @param filterSystem Filter for rules that are system rules when true, or not when false. Leave off for both mixed (optional)
/// @param filterTrigger Filter for rules that are for the trigger with the given name (optional)
/// @param filterAction Filter for rules that use the action with the given name (optional)
/// @param filterCondition Filter for rules that have a condition containing the given string (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceBreRule_*
-(NSURLSessionTask*) getBRERulesWithFilterName: (NSString*) filterName
    filterEnabled: (NSNumber*) filterEnabled
    filterSystem: (NSNumber*) filterSystem
    filterTrigger: (NSString*) filterTrigger
    filterAction: (NSString*) filterAction
    filterCondition: (NSString*) filterCondition
    size: (NSNumber*) size
    page: (NSNumber*) page
    completionHandler: (void (^)(JSAPIPageResourceBreRule_* output, NSError* error)) handler;


/// Enable or disable a rule
/// This is helpful for turning off systems rules which cannot be deleted or modified otherwise
///
/// @param _id The id of the rule
/// @param enabled The boolean value (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) setBRERuleWithId: (NSString*) _id
    enabled: (JSAPIBooleanResource*) enabled
    completionHandler: (void (^)(NSError* error)) handler;


/// Update a rule
/// Cannot update system rules
///
/// @param _id The id of the rule
/// @param breRule The BRE rule object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIBreRule*
-(NSURLSessionTask*) updateBRERuleWithId: (NSString*) _id
    breRule: (JSAPIBreRule*) breRule
    completionHandler: (void (^)(JSAPIBreRule* output, NSError* error)) handler;



@end
