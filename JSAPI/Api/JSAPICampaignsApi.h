#import <Foundation/Foundation.h>
#import "JSAPICampaignResource.h"
#import "JSAPIPageResourceCampaignResource_.h"
#import "JSAPIPageResourceChallengeResource_.h"
#import "JSAPIPageResourceTemplateResource_.h"
#import "JSAPIResult.h"
#import "JSAPITemplateResource.h"
#import "JSAPIApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface JSAPICampaignsApi: NSObject <JSAPIApi>

extern NSString* kJSAPICampaignsApiErrorDomain;
extern NSInteger kJSAPICampaignsApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(JSAPIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Add a challenge to a campaign
/// <b>Permissions Needed:</b> CAMPAIGNS_ADMIN
///
/// @param _id The id of the campaign
/// @param challengeId The id of the challenge (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) addChallengeToCampaignWithId: (NSNumber*) _id
    challengeId: (NSNumber*) challengeId
    completionHandler: (void (^)(NSError* error)) handler;


/// Create a campaign
/// <b>Permissions Needed:</b> CAMPAIGNS_ADMIN
///
/// @param campaignResource The campaign resource object (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPICampaignResource*
-(NSURLSessionTask*) createCampaignWithCampaignResource: (JSAPICampaignResource*) campaignResource
    completionHandler: (void (^)(JSAPICampaignResource* output, NSError* error)) handler;


/// Create a campaign template
/// Campaign Templates define a type of campaign and the properties they have. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param campaignTemplateResource The campaign template resource object (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) createCampaignTemplateWithCampaignTemplateResource: (JSAPITemplateResource*) campaignTemplateResource
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// Delete a campaign
/// <b>Permissions Needed:</b> CAMPAIGNS_ADMIN
///
/// @param _id The campaign id
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteCampaignWithId: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a campaign template
/// If cascade = 'detach', it will force delete the template even if it's attached to other objects. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param cascade The value needed to delete used templates (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteCampaignTemplateWithId: (NSString*) _id
    cascade: (NSString*) cascade
    completionHandler: (void (^)(NSError* error)) handler;


/// Returns a single campaign
/// <b>Permissions Needed:</b> ANY
///
/// @param _id The campaign id
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPICampaignResource*
-(NSURLSessionTask*) getCampaignWithId: (NSNumber*) _id
    completionHandler: (void (^)(JSAPICampaignResource* output, NSError* error)) handler;


/// List the challenges associated with a campaign
/// <b>Permissions Needed:</b> ANY
///
/// @param _id The campaign id
/// @param filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the challenge start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
/// @param filterEndDate A comma separated string without spaces.  First value is the operator to search on, second value is the challenge end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceChallengeResource_*
-(NSURLSessionTask*) getCampaignChallengesWithId: (NSNumber*) _id
    filterStartDate: (NSString*) filterStartDate
    filterEndDate: (NSString*) filterEndDate
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceChallengeResource_* output, NSError* error)) handler;


/// Get a single campaign template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN or CAMPAIGNS_ADMIN
///
/// @param _id The id of the template
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) getCampaignTemplateWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// List and search campaign templates
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN or CAMPAIGNS_ADMIN
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceTemplateResource_*
-(NSURLSessionTask*) getCampaignTemplatesWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceTemplateResource_* output, NSError* error)) handler;


/// List and search campaigns
/// <b>Permissions Needed:</b> ANY
///
/// @param filterActive Filter for campaigns that are active (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceCampaignResource_*
-(NSURLSessionTask*) getCampaignsWithFilterActive: (NSNumber*) filterActive
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceCampaignResource_* output, NSError* error)) handler;


/// Remove a challenge from a campaign
/// <b>Permissions Needed:</b> CAMPAIGNS_ADMIN
///
/// @param campaignId The campaign id
/// @param _id The challenge id
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) removeChallengeFromCampaignWithCampaignId: (NSNumber*) campaignId
    _id: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Update a campaign
/// <b>Permissions Needed:</b> CAMPAIGNS_ADMIN
///
/// @param _id The campaign id
/// @param campaignResource The campaign resource object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPICampaignResource*
-(NSURLSessionTask*) updateCampaignWithId: (NSNumber*) _id
    campaignResource: (JSAPICampaignResource*) campaignResource
    completionHandler: (void (^)(JSAPICampaignResource* output, NSError* error)) handler;


/// Update an campaign template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param campaignTemplateResource The campaign template resource object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) updateCampaignTemplateWithId: (NSString*) _id
    campaignTemplateResource: (JSAPITemplateResource*) campaignTemplateResource
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;



@end
