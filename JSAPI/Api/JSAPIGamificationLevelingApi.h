#import <Foundation/Foundation.h>
#import "JSAPIBreTriggerResource.h"
#import "JSAPIIntWrapper.h"
#import "JSAPILevelingResource.h"
#import "JSAPIPageResourceLevelingResource_.h"
#import "JSAPIPageResourceUserLevelingResource_.h"
#import "JSAPIResult.h"
#import "JSAPIUserLevelingResource.h"
#import "JSAPIApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface JSAPIGamificationLevelingApi: NSObject <JSAPIApi>

extern NSString* kJSAPIGamificationLevelingApiErrorDomain;
extern NSInteger kJSAPIGamificationLevelingApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(JSAPIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create a level schema
/// <b>Permissions Needed:</b> LEVELING_ADMIN
///
/// @param level The level schema definition (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPILevelingResource*
-(NSURLSessionTask*) createLevelWithLevel: (JSAPILevelingResource*) level
    completionHandler: (void (^)(JSAPILevelingResource* output, NSError* error)) handler;


/// Delete a level
/// <b>Permissions Needed:</b> LEVELING_ADMIN
///
/// @param name The level schema name
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteLevelWithName: (NSString*) name
    completionHandler: (void (^)(NSError* error)) handler;


/// Retrieve a level
/// <b>Permissions Needed:</b> LEVELING_USER
///
/// @param name The level schema name
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPILevelingResource*
-(NSURLSessionTask*) getLevelWithName: (NSString*) name
    completionHandler: (void (^)(JSAPILevelingResource* output, NSError* error)) handler;


/// Get the list of triggers that can be used to trigger a leveling progress update
/// <b>Permissions Needed:</b> LEVELING_ADMIN
///
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSArray<JSAPIBreTriggerResource>*
-(NSURLSessionTask*) getLevelTriggersWithCompletionHandler: 
    (void (^)(NSArray<JSAPIBreTriggerResource>* output, NSError* error)) handler;


/// List and search levels
/// Get a list of levels schemas with optional filtering. <br><br><b>Permissions Needed:</b> LEVELING_USER
///
/// @param filterName Filter for level schemas whose name contains a given string (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to name:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceLevelingResource_*
-(NSURLSessionTask*) getLevelsWithFilterName: (NSString*) filterName
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceLevelingResource_* output, NSError* error)) handler;


/// Get a user's progress for a given level schema
/// <b>Permissions Needed:</b> LEVELING_USER or self
///
/// @param userId The id of the user or &#39;me&#39;
/// @param name The level schema name
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIUserLevelingResource*
-(NSURLSessionTask*) getUserLevelWithUserId: (NSString*) userId
    name: (NSString*) name
    completionHandler: (void (^)(JSAPIUserLevelingResource* output, NSError* error)) handler;


/// Get a user's progress for all level schemas
/// Filtering and sorting is based on the LevelingResource object, not the UserLevelingResource that is returned here. <br><br><b>Permissions Needed:</b> LEVELING_USER or self
///
/// @param userId The id of the user or &#39;me&#39;
/// @param filterName Filter for level schemas whose name contains a given string (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceUserLevelingResource_*
-(NSURLSessionTask*) getUserLevelsWithUserId: (NSString*) userId
    filterName: (NSString*) filterName
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceUserLevelingResource_* output, NSError* error)) handler;


/// Update or create a leveling progress record for a user
/// If no progress record yet exists for the user, it will be created. Otherwise the provided value will be added to it. May be negative. If progress meets or exceeds the level's max_value it will be marked as earned and a BRE event will be triggered for the <code>BreAchievementEarnedTrigger</code>. <br><br><b>Permissions Needed:</b> LEVELING_ADMIN
///
/// @param userId The id of the user
/// @param name The level schema name
/// @param progress The amount of progress to add (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) incrementProgressWithUserId: (NSNumber*) userId
    name: (NSString*) name
    progress: (JSAPIIntWrapper*) progress
    completionHandler: (void (^)(NSError* error)) handler;


/// Set leveling progress for a user
/// If no progress record yet exists for the user, it will be created. Otherwise it will be updated to the provided value. If progress meets or exceeds the level's max_value it will be marked as earned and a BRE event will be triggered for the <code>BreAchievementEarnedTrigger</code>. <br><br><b>Permissions Needed:</b> LEVELING_ADMIN
///
/// @param userId The id of the user
/// @param name The level schema name
/// @param progress The new progress amount (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) setProgressWithUserId: (NSNumber*) userId
    name: (NSString*) name
    progress: (JSAPIIntWrapper*) progress
    completionHandler: (void (^)(NSError* error)) handler;


/// Update a level
/// <b>Permissions Needed:</b> LEVELING_ADMIN
///
/// @param name The level schema name
/// @param varNewLevel The level schema definition (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPILevelingResource*
-(NSURLSessionTask*) updateLevelWithName: (NSString*) name
    varNewLevel: (JSAPILevelingResource*) varNewLevel
    completionHandler: (void (^)(JSAPILevelingResource* output, NSError* error)) handler;



@end
