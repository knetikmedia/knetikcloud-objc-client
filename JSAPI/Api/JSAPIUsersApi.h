#import <Foundation/Foundation.h>
#import "JSAPIChatMessageRequest.h"
#import "JSAPIChatMessageResource.h"
#import "JSAPINewPasswordRequest.h"
#import "JSAPIPageResourceChatMessageResource_.h"
#import "JSAPIPageResourceTemplateResource_.h"
#import "JSAPIPageResourceUserBaseResource_.h"
#import "JSAPIPasswordResetRequest.h"
#import "JSAPIResult.h"
#import "JSAPIStringWrapper.h"
#import "JSAPITemplateResource.h"
#import "JSAPIUserResource.h"
#import "JSAPIApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface JSAPIUsersApi: NSObject <JSAPIApi>

extern NSString* kJSAPIUsersApiErrorDomain;
extern NSInteger kJSAPIUsersApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(JSAPIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Add a tag to a user
/// <b>Permissions Needed:</b> USERS_ADMIN
///
/// @param userId The id of the user
/// @param tag tag
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) addUserTagWithUserId: (NSNumber*) userId
    tag: (JSAPIStringWrapper*) tag
    completionHandler: (void (^)(NSError* error)) handler;


/// Create a user template
/// User Templates define a type of user and the properties they have. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param userTemplateResource The user template resource object (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) createUserTemplateWithUserTemplateResource: (JSAPITemplateResource*) userTemplateResource
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// Delete a user template
/// If cascade = 'detach', it will force delete the template even if it's attached to other objects. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param cascade The value needed to delete used templates (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteUserTemplateWithId: (NSString*) _id
    cascade: (NSString*) cascade
    completionHandler: (void (^)(NSError* error)) handler;


/// Get a list of direct messages with this user
/// <b>Permissions Needed:</b> ANY
///
/// @param recipientId The user id
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceChatMessageResource_*
-(NSURLSessionTask*) getDirectMessages1WithRecipientId: (NSNumber*) recipientId
    size: (NSNumber*) size
    page: (NSNumber*) page
    completionHandler: (void (^)(JSAPIPageResourceChatMessageResource_* output, NSError* error)) handler;


/// Get a single user
/// Additional private info is included as USERS_ADMIN. <br><br><b>Permissions Needed:</b> ANY
///
/// @param _id The id of the user or &#39;me&#39;
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIUserResource*
-(NSURLSessionTask*) getUserWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPIUserResource* output, NSError* error)) handler;


/// List tags for a user
/// <b>Permissions Needed:</b> USERS_ADMIN
///
/// @param userId The id of the user
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSArray<NSString*>*
-(NSURLSessionTask*) getUserTagsWithUserId: (NSNumber*) userId
    completionHandler: (void (^)(NSArray<NSString*>* output, NSError* error)) handler;


/// Get a single user template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN or USERS_ADMIN
///
/// @param _id The id of the template
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) getUserTemplateWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// List and search user templates
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN or USERS_ADMIN
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceTemplateResource_*
-(NSURLSessionTask*) getUserTemplatesWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceTemplateResource_* output, NSError* error)) handler;


/// List and search users
/// Additional private info is included as USERS_ADMIN. <br><br><b>Permissions Needed:</b> ANY
///
/// @param filterDisplayname Filter for users whose display name starts with provided string. (optional)
/// @param filterEmail Filter for users whose email starts with provided string. Requires USERS_ADMIN permission (optional)
/// @param filterFirstname Filter for users whose first name starts with provided string. Requires USERS_ADMIN permission (optional)
/// @param filterFullname Filter for users whose full name starts with provided string. Requires USERS_ADMIN permission (optional)
/// @param filterLastname Filter for users whose last name starts with provided string. Requires USERS_ADMIN permission (optional)
/// @param filterUsername Filter for users whose username starts with the provided string. Requires USERS_ADMIN permission (optional)
/// @param filterTag Filter for users who have a given tag (optional)
/// @param filterGroup Filter for users in a given group, by unique name (optional)
/// @param filterRole Filter for users with a given role (optional)
/// @param filterLastActivity A comma separated string without spaces.  First value is the operator to search on, second value is the date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
/// @param filterIdList A comma separated list of ids. (optional)
/// @param filterSearch Filter for users whose display_name starts with the provided string, or username if display_name is null (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceUserBaseResource_*
-(NSURLSessionTask*) getUsersWithFilterDisplayname: (NSString*) filterDisplayname
    filterEmail: (NSString*) filterEmail
    filterFirstname: (NSString*) filterFirstname
    filterFullname: (NSString*) filterFullname
    filterLastname: (NSString*) filterLastname
    filterUsername: (NSString*) filterUsername
    filterTag: (NSString*) filterTag
    filterGroup: (NSString*) filterGroup
    filterRole: (NSString*) filterRole
    filterLastActivity: (NSString*) filterLastActivity
    filterIdList: (NSString*) filterIdList
    filterSearch: (NSString*) filterSearch
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceUserBaseResource_* output, NSError* error)) handler;


/// Choose a new password after a reset
/// Finish resetting a user's password using the secret provided from the password-reset endpoint.  Password should be in plain text and will be encrypted on receipt. Use SSL for security. <br><br><b>Permissions Needed:</b> ANY
///
/// @param _id The id of the user
/// @param varNewPasswordRequest The new password request object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) passwordResetWithId: (NSNumber*) _id
    varNewPasswordRequest: (JSAPINewPasswordRequest*) varNewPasswordRequest
    completionHandler: (void (^)(NSError* error)) handler;


/// Send a user message
/// 
///
/// @param recipientId The user id
/// @param chatMessageRequest The chat message request (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIChatMessageResource*
-(NSURLSessionTask*) postUserMessageWithRecipientId: (NSNumber*) recipientId
    chatMessageRequest: (JSAPIChatMessageRequest*) chatMessageRequest
    completionHandler: (void (^)(JSAPIChatMessageResource* output, NSError* error)) handler;


/// Register a new user
/// Password should be in plain text and will be encrypted on receipt. Use SSL for security. <br><br><b>Permissions Needed:</b> ANY
///
/// @param userResource The user resource object (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIUserResource*
-(NSURLSessionTask*) registerUserWithUserResource: (JSAPIUserResource*) userResource
    completionHandler: (void (^)(JSAPIUserResource* output, NSError* error)) handler;


/// Remove a tag from a user
/// <b>Permissions Needed:</b> USERS_ADMIN
///
/// @param userId The id of the user
/// @param tag The tag to remove
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) removeUserTagWithUserId: (NSNumber*) userId
    tag: (NSString*) tag
    completionHandler: (void (^)(NSError* error)) handler;


/// Set a user's password
/// Password should be in plain text and will be encrypted on receipt. Use SSL for security. <br><br><b>Permissions Needed:</b> USERS_ADMIN or (USERS_USER and owner)
///
/// @param _id The id of the user
/// @param password The new plain text password (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) setPasswordWithId: (NSNumber*) _id
    password: (JSAPIStringWrapper*) password
    completionHandler: (void (^)(NSError* error)) handler;


/// Reset a user's password
/// A reset code will be generated and a 'forgot_password' BRE event will be fired with that code.  The default system rule will send an email to the selected user if an email service has been setup. You can modify that rule in BRE to send an SMS instead or any other type of notification as you see fit. <br><br><b>Permissions Needed:</b> ANY
///
/// @param _id The id of the user
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) startPasswordResetWithId: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Reset a user's password without user id
/// A reset code will be generated and a 'forgot_password' BRE event will be fired with that code.  The default system rule will send an email to the selected user if an email service has been setup. You can modify that rule in BRE to send an SMS instead or any other type of notification as you see fit.  Must submit their email, username, or mobile phone number. <br><br><b>Permissions Needed:</b> ANY
///
/// @param passwordReset An object containing one of three methods to look up a user (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) submitPasswordResetWithPasswordReset: (JSAPIPasswordResetRequest*) passwordReset
    completionHandler: (void (^)(NSError* error)) handler;


/// Update a user
/// Password will not be edited on this endpoint, use password specific endpoints. <br><br><b>Permissions Needed:</b> USERS_ADMIN or owner
///
/// @param _id The id of the user or &#39;me&#39;
/// @param userResource The user resource object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) updateUserWithId: (NSString*) _id
    userResource: (JSAPIUserResource*) userResource
    completionHandler: (void (^)(NSError* error)) handler;


/// Update a user template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param userTemplateResource The user template resource object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) updateUserTemplateWithId: (NSString*) _id
    userTemplateResource: (JSAPITemplateResource*) userTemplateResource
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;



@end
