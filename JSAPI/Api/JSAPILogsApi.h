#import <Foundation/Foundation.h>
#import "JSAPIBreEventLog.h"
#import "JSAPIForwardLog.h"
#import "JSAPIPageResourceBreEventLog_.h"
#import "JSAPIPageResourceForwardLog_.h"
#import "JSAPIPageResourceUserActionLog_.h"
#import "JSAPIResult.h"
#import "JSAPIUserActionLog.h"
#import "JSAPIApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface JSAPILogsApi: NSObject <JSAPIApi>

extern NSString* kJSAPILogsApiErrorDomain;
extern NSInteger kJSAPILogsApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(JSAPIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Add a user log entry
/// <b>Permissions Needed:</b> owner
///
/// @param logEntry The user log entry to be added (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) addUserLogWithLogEntry: (JSAPIUserActionLog*) logEntry
    completionHandler: (void (^)(NSError* error)) handler;


/// Get an existing BRE event log entry by id
/// <b>Permissions Needed:</b> BRE_RULE_ENGINE_EVENTS_ADMIN
///
/// @param _id The BRE event log entry id
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIBreEventLog*
-(NSURLSessionTask*) getBREEventLogWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPIBreEventLog* output, NSError* error)) handler;


/// Returns a list of BRE event log entries
/// <b>Permissions Needed:</b> BRE_RULE_ENGINE_EVENTS_ADMIN
///
/// @param filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the event log start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
/// @param filterEventName Filter event logs by event name (optional)
/// @param filterEventId Filter event logs by request id (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:DESC)
/// @param filterRuleId Filter event logs by request id (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceBreEventLog_*
-(NSURLSessionTask*) getBREEventLogsWithFilterStartDate: (NSString*) filterStartDate
    filterEventName: (NSString*) filterEventName
    filterEventId: (NSString*) filterEventId
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    filterRuleId: (NSString*) filterRuleId
    completionHandler: (void (^)(JSAPIPageResourceBreEventLog_* output, NSError* error)) handler;


/// Get an existing forward log entry by id
/// <b>Permissions Needed:</b> BRE_RULE_ENGINE_EVENTS_ADMIN
///
/// @param _id The forward log entry id
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIForwardLog*
-(NSURLSessionTask*) getBREForwardLogWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPIForwardLog* output, NSError* error)) handler;


/// Returns a list of forward log entries
/// <b>Permissions Needed:</b> BRE_RULE_ENGINE_EVENTS_ADMIN
///
/// @param filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
/// @param filterEndDate A comma separated string without spaces.  First value is the operator to search on, second value is the log end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
/// @param filterStatusCode Filter forward logs by http status code (optional)
/// @param filterUrl Filter forward logs by URL starting with... (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:DESC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceForwardLog_*
-(NSURLSessionTask*) getBREForwardLogsWithFilterStartDate: (NSString*) filterStartDate
    filterEndDate: (NSString*) filterEndDate
    filterStatusCode: (NSNumber*) filterStatusCode
    filterUrl: (NSNumber*) filterUrl
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceForwardLog_* output, NSError* error)) handler;


/// Returns a user log entry by id
/// <b>Permissions Needed:</b> LOGS_ADMIN or owner
///
/// @param _id The user log entry id
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIUserActionLog*
-(NSURLSessionTask*) getUserLogWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPIUserActionLog* output, NSError* error)) handler;


/// Returns a page of user logs entries
/// <b>Permissions Needed:</b> LOGS_ADMIN or owner
///
/// @param filterUser Filter for actions taken by a specific user by id (optional)
/// @param filterActionName Filter for actions of a specific name (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to timestamp:DESC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceUserActionLog_*
-(NSURLSessionTask*) getUserLogsWithFilterUser: (NSNumber*) filterUser
    filterActionName: (NSString*) filterActionName
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceUserActionLog_* output, NSError* error)) handler;



@end
