#import <Foundation/Foundation.h>
#import "JSAPIPageResourceSimpleUserResource_.h"
#import "JSAPIResult.h"
#import "JSAPIStringWrapper.h"
#import "JSAPIApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface JSAPIUsersFriendshipsApi: NSObject <JSAPIApi>

extern NSString* kJSAPIUsersFriendshipsApiErrorDomain;
extern NSInteger kJSAPIUsersFriendshipsApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(JSAPIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Add a friend
/// As a user, either creates or confirm a pending request. As an admin, call this endpoint twice while inverting the IDs to create a confirmed friendship. <br><br><b>Permissions Needed:</b> FRIENDSHIPS_ADMIN or (FRIENDSHIPS_USER and owner)
///
/// @param userId The id of the user or &#39;me&#39; if logged in
/// @param _id The id of the user to befriend
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) addFriendWithUserId: (NSString*) userId
    _id: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Get friends list
/// <b>Permissions Needed:</b> FRIENDSHIPS_ADMIN or (FRIENDSHIPS_USER and owner)
///
/// @param userId The id of the user or &#39;me&#39;
/// @param filterUsername Filter for friends with the given username (optional)
/// @param filterUserId Filter for friends by user id (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceSimpleUserResource_*
-(NSURLSessionTask*) getFriendsWithUserId: (NSString*) userId
    filterUsername: (NSString*) filterUsername
    filterUserId: (NSNumber*) filterUserId
    size: (NSNumber*) size
    page: (NSNumber*) page
    completionHandler: (void (^)(JSAPIPageResourceSimpleUserResource_* output, NSError* error)) handler;


/// Returns the invite token
/// This is a unique invite token that allows direct connection to the request user.  Exposing that token presents privacy issues if the token is leaked. Use friend request flow instead if confirmation is required. <br><br><b>Permissions Needed:</b> FRIENDSHIPS_ADMIN or (FRIENDSHIPS_USER and owner)
///
/// @param userId The id of the user or &#39;me&#39; if logged in
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSString*
-(NSURLSessionTask*) getInviteTokenWithUserId: (NSString*) userId
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Get pending invites
/// Invites that the specified user received. <br><br><b>Permissions Needed:</b> FRIENDSHIPS_ADMIN or (FRIENDSHIPS_USER and owner)
///
/// @param userId The id of the user or &#39;me&#39;
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceSimpleUserResource_*
-(NSURLSessionTask*) getInvitesWithUserId: (NSString*) userId
    size: (NSNumber*) size
    page: (NSNumber*) page
    completionHandler: (void (^)(JSAPIPageResourceSimpleUserResource_* output, NSError* error)) handler;


/// Redeem friendship token
/// Immediately connects the requested user with the user mapped by the provided invite token. <br><br><b>Permissions Needed:</b> FRIENDSHIPS_ADMIN or (FRIENDSHIPS_USER and owner)
///
/// @param userId The id of the user or &#39;me&#39; if logged in
/// @param token The invite token (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) redeemFriendshipTokenWithUserId: (NSString*) userId
    token: (JSAPIStringWrapper*) token
    completionHandler: (void (^)(NSError* error)) handler;


/// Remove or decline a friend
/// <b>Permissions Needed:</b> FRIENDSHIPS_ADMIN or (FRIENDSHIPS_USER and owner)
///
/// @param userId The id of the user or &#39;me&#39; if logged in
/// @param _id The id of the user to befriend
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) removeOrDeclineFriendWithUserId: (NSString*) userId
    _id: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;



@end
