#import <Foundation/Foundation.h>
#import "JSAPIAchievementDefinitionResource.h"
#import "JSAPIBreTriggerResource.h"
#import "JSAPIIntWrapper.h"
#import "JSAPIPageResourceAchievementDefinitionResource_.h"
#import "JSAPIPageResourceTemplateResource_.h"
#import "JSAPIPageResourceUserAchievementGroupResource_.h"
#import "JSAPIResult.h"
#import "JSAPITemplateResource.h"
#import "JSAPIUserAchievementGroupResource.h"
#import "JSAPIApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface JSAPIGamificationAchievementsApi: NSObject <JSAPIApi>

extern NSString* kJSAPIGamificationAchievementsApiErrorDomain;
extern NSInteger kJSAPIGamificationAchievementsApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(JSAPIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create a new achievement definition
/// If the definition contains a trigger event name, a BRE rule is created, so that tracking logic is executed when the triggering event occurs. If no trigger event name is specified, the user's achievement status must manually be updated via the API. <br><br><b>Permissions Needed:</b> ACHIEVEMENTS_ADMIN
///
/// @param achievement The achievement definition (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIAchievementDefinitionResource*
-(NSURLSessionTask*) createAchievementWithAchievement: (JSAPIAchievementDefinitionResource*) achievement
    completionHandler: (void (^)(JSAPIAchievementDefinitionResource* output, NSError* error)) handler;


/// Create an achievement template
/// Achievement templates define a type of achievement and the properties they have. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param template The achievement template to be created (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) createAchievementTemplateWithTemplate: (JSAPITemplateResource*) template
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// Delete an achievement definition
/// Will also disable the associated generated rule, if any. <br><br><b>Permissions Needed:</b> ACHIEVEMENTS_ADMIN
///
/// @param name The name of the achievement
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteAchievementWithName: (NSString*) name
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete an achievement template
/// If cascade = 'detach', it will force delete the template even if it's attached to other objects. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param cascade The value needed to delete used templates (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteAchievementTemplateWithId: (NSString*) _id
    cascade: (NSString*) cascade
    completionHandler: (void (^)(NSError* error)) handler;


/// Get a single achievement definition
/// <b>Permissions Needed:</b> ACHIEVEMENTS_ADMIN or ACHIEVEMENTS_USER
///
/// @param name The name of the achievement
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIAchievementDefinitionResource*
-(NSURLSessionTask*) getAchievementWithName: (NSString*) name
    completionHandler: (void (^)(JSAPIAchievementDefinitionResource* output, NSError* error)) handler;


/// Get a single achievement template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN or ACHIEVEMENTS_ADMIN
///
/// @param _id The id of the template
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) getAchievementTemplateWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// List and search achievement templates
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN or ACHIEVEMENTS_ADMIN
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceTemplateResource_*
-(NSURLSessionTask*) getAchievementTemplatesWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceTemplateResource_* output, NSError* error)) handler;


/// Get the list of triggers that can be used to trigger an achievement progress update
/// <b>Permissions Needed:</b> ACHIEVEMENTS_ADMIN
///
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSArray<JSAPIBreTriggerResource>*
-(NSURLSessionTask*) getAchievementTriggersWithCompletionHandler: 
    (void (^)(NSArray<JSAPIBreTriggerResource>* output, NSError* error)) handler;


/// Get all achievement definitions in the system
/// <b>Permissions Needed:</b> ACHIEVEMENTS_ADMIN or ACHIEVEMENTS_USER
///
/// @param filterTagset Filter for achievements with specified tags (separated by comma) (optional)
/// @param filterName Filter for achievements whose name contains a string (optional)
/// @param filterHidden Filter for achievements that are hidden or not (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to name:ASC)
/// @param filterDerived Filter for achievements that are derived from other services (optional) (default to false)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceAchievementDefinitionResource_*
-(NSURLSessionTask*) getAchievementsWithFilterTagset: (NSString*) filterTagset
    filterName: (NSString*) filterName
    filterHidden: (NSNumber*) filterHidden
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    filterDerived: (NSNumber*) filterDerived
    completionHandler: (void (^)(JSAPIPageResourceAchievementDefinitionResource_* output, NSError* error)) handler;


/// Get a list of derived achievements
/// Used by other services that depend on achievements.  <br><br><b>Permissions Needed:</b> ACHIEVEMENTS_ADMIN
///
/// @param name The name of the derived achievement
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return NSArray<JSAPIAchievementDefinitionResource>*
-(NSURLSessionTask*) getDerivedAchievementsWithName: (NSString*) name
    completionHandler: (void (^)(NSArray<JSAPIAchievementDefinitionResource>* output, NSError* error)) handler;


/// Retrieve progress on a given achievement for a given user
/// Assets will not be filled in on the resources returned. Use 'Get a single poll' to retrieve the full resource with assets for a given item as needed. <br><br><b>Permissions Needed:</b> ACHIEVEMENTS_ADMIN
///
/// @param userId The user&#39;s id
/// @param achievementName The achievement&#39;s name
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIUserAchievementGroupResource*
-(NSURLSessionTask*) getUserAchievementProgressWithUserId: (NSNumber*) userId
    achievementName: (NSString*) achievementName
    completionHandler: (void (^)(JSAPIUserAchievementGroupResource* output, NSError* error)) handler;


/// Retrieve progress on achievements for a given user
/// Assets will not be filled in on the resources returned. Use 'Get a single poll' to retrieve the full resource with assets for a given item as needed. <br><br><b>Permissions Needed:</b> ACHIEVEMENTS_ADMIN
///
/// @param userId The user&#39;s id
/// @param filterAchievementDerived Filter for achievements that are derived from other services (optional)
/// @param filterAchievementTagset Filter for achievements with specified tags (separated by comma) (optional)
/// @param filterAchievementName Filter for achievements whose name contains a string (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceUserAchievementGroupResource_*
-(NSURLSessionTask*) getUserAchievementsProgressWithUserId: (NSNumber*) userId
    filterAchievementDerived: (NSNumber*) filterAchievementDerived
    filterAchievementTagset: (NSString*) filterAchievementTagset
    filterAchievementName: (NSString*) filterAchievementName
    size: (NSNumber*) size
    page: (NSNumber*) page
    completionHandler: (void (^)(JSAPIPageResourceUserAchievementGroupResource_* output, NSError* error)) handler;


/// Retrieve progress on a given achievement for all users
/// Assets will not be filled in on the resources returned. Use 'Get single achievement progress for user' to retrieve the full resource with assets for a given user as needed. <br><br><b>Permissions Needed:</b> ACHIEVEMENTS_ADMIN
///
/// @param achievementName The achievement&#39;s name
/// @param filterAchievementDerived Filter for achievements that are derived from other services (optional)
/// @param filterAchievementTagset Filter for achievements with specified tags (separated by comma) (optional)
/// @param filterAchievementName Filter for achievements whose name contains a string (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceUserAchievementGroupResource_*
-(NSURLSessionTask*) getUsersAchievementProgressWithAchievementName: (NSString*) achievementName
    filterAchievementDerived: (NSNumber*) filterAchievementDerived
    filterAchievementTagset: (NSString*) filterAchievementTagset
    filterAchievementName: (NSString*) filterAchievementName
    size: (NSNumber*) size
    page: (NSNumber*) page
    completionHandler: (void (^)(JSAPIPageResourceUserAchievementGroupResource_* output, NSError* error)) handler;


/// Retrieve progress on achievements for all users
/// Assets will not be filled in on the resources returned. Use 'Get single achievement progress for user' to retrieve the full resource with assets for a given user as needed. <br><br><b>Permissions Needed:</b> ACHIEVEMENTS_ADMIN
///
/// @param filterAchievementDerived Filter for achievements that are derived from other services (optional)
/// @param filterAchievementTagset Filter for achievements with specified tags (separated by comma) (optional)
/// @param filterAchievementName Filter for achievements whose name contains a string (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceUserAchievementGroupResource_*
-(NSURLSessionTask*) getUsersAchievementsProgressWithFilterAchievementDerived: (NSNumber*) filterAchievementDerived
    filterAchievementTagset: (NSString*) filterAchievementTagset
    filterAchievementName: (NSString*) filterAchievementName
    size: (NSNumber*) size
    page: (NSNumber*) page
    completionHandler: (void (^)(JSAPIPageResourceUserAchievementGroupResource_* output, NSError* error)) handler;


/// Increment an achievement progress record for a user
/// If no progress record yet exists for the user, it will be created. Otherwise it will be updated and the provided value added to the existing progress. May be negative. If progress meets or exceeds the achievement's max_value it will be marked as earned and a BRE event will be triggered for the <code>BreAchievementEarnedTrigger</code>. <br><br><b>Permissions Needed:</b> ACHIEVEMENTS_ADMIN
///
/// @param userId The user&#39;s id
/// @param achievementName The achievement&#39;s name
/// @param progress The amount to add to the progress value (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIUserAchievementGroupResource*
-(NSURLSessionTask*) incrementAchievementProgressWithUserId: (NSNumber*) userId
    achievementName: (NSString*) achievementName
    progress: (JSAPIIntWrapper*) progress
    completionHandler: (void (^)(JSAPIUserAchievementGroupResource* output, NSError* error)) handler;


/// Set an achievement progress record for a user
/// If no progress record yet exists for the user, it will be created. Otherwise it will be updated and progress set to the provided value. If progress meets or exceeds the achievement's max_value it will be marked as earned and a BRE event will be triggered for the <code>BreAchievementEarnedTrigger</code>. <br><br><b>Permissions Needed:</b> ACHIEVEMENTS_ADMIN
///
/// @param userId The user&#39;s id
/// @param achievementName The achievement&#39;s name
/// @param progress The new progress value (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIUserAchievementGroupResource*
-(NSURLSessionTask*) setAchievementProgressWithUserId: (NSNumber*) userId
    achievementName: (NSString*) achievementName
    progress: (JSAPIIntWrapper*) progress
    completionHandler: (void (^)(JSAPIUserAchievementGroupResource* output, NSError* error)) handler;


/// Update an achievement definition
/// The existing generated rule, if any, will be deleted. A new rule will be created if a trigger event name is specified in the new version. <br><br><b>Permissions Needed:</b> ACHIEVEMENTS_ADMIN
///
/// @param name The name of the achievement
/// @param achievement The achievement definition (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIAchievementDefinitionResource*
-(NSURLSessionTask*) updateAchievementWithName: (NSString*) name
    achievement: (JSAPIAchievementDefinitionResource*) achievement
    completionHandler: (void (^)(JSAPIAchievementDefinitionResource* output, NSError* error)) handler;


/// Update an achievement template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param template The updated template (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) updateAchievementTemplateWithId: (NSString*) _id
    template: (JSAPITemplateResource*) template
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;



@end
