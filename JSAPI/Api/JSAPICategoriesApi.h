#import <Foundation/Foundation.h>
#import "JSAPICategoryResource.h"
#import "JSAPIPageResourceCategoryResource_.h"
#import "JSAPIPageResourceString_.h"
#import "JSAPIPageResourceTemplateResource_.h"
#import "JSAPIResult.h"
#import "JSAPITemplateResource.h"
#import "JSAPIApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface JSAPICategoriesApi: NSObject <JSAPIApi>

extern NSString* kJSAPICategoriesApiErrorDomain;
extern NSInteger kJSAPICategoriesApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(JSAPIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create a new category
/// <b>Permissions Needed:</b> CATEGORIES_ADMIN
///
/// @param category The category to create (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPICategoryResource*
-(NSURLSessionTask*) createCategoryWithCategory: (JSAPICategoryResource*) category
    completionHandler: (void (^)(JSAPICategoryResource* output, NSError* error)) handler;


/// Create a category template
/// Templates define a type of category and the properties they have. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param template The template to create (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) createCategoryTemplateWithTemplate: (JSAPITemplateResource*) template
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// Delete an existing category
/// <b>Permissions Needed:</b> CATEGORIES_ADMIN
///
/// @param _id The id of the category to be deleted
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteCategoryWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a category template
/// If cascade = 'detach', it will force delete the template even if it's attached to other objects. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param cascade The value needed to delete used templates (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteCategoryTemplateWithId: (NSString*) _id
    cascade: (NSString*) cascade
    completionHandler: (void (^)(NSError* error)) handler;


/// List and search categories with optional filters
/// <b>Permissions Needed:</b> ANY
///
/// @param filterSearch Filter for categories whose names begin with provided string (optional)
/// @param filterActive Filter for categories that are specifically active or inactive (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceCategoryResource_*
-(NSURLSessionTask*) getCategoriesWithFilterSearch: (NSString*) filterSearch
    filterActive: (NSNumber*) filterActive
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceCategoryResource_* output, NSError* error)) handler;


/// Get a single category
/// <b>Permissions Needed:</b> ANY
///
/// @param _id The id of the category to retrieve
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPICategoryResource*
-(NSURLSessionTask*) getCategoryWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPICategoryResource* output, NSError* error)) handler;


/// Get a single category template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN or CATEGORIES_ADMIN
///
/// @param _id The id of the template
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) getCategoryTemplateWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// List and search category templates
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN or CATEGORIES_ADMIN
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceTemplateResource_*
-(NSURLSessionTask*) getCategoryTemplatesWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceTemplateResource_* output, NSError* error)) handler;


/// List all trivia tags in the system
/// <b>Permissions Needed:</b> ANY
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceString_*
-(NSURLSessionTask*) getTagsWithSize: (NSNumber*) size
    page: (NSNumber*) page
    completionHandler: (void (^)(JSAPIPageResourceString_* output, NSError* error)) handler;


/// Update an existing category
/// <b>Permissions Needed:</b> CATEGORIES_ADMIN
///
/// @param _id The id of the category
/// @param category The category to update (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPICategoryResource*
-(NSURLSessionTask*) updateCategoryWithId: (NSString*) _id
    category: (JSAPICategoryResource*) category
    completionHandler: (void (^)(JSAPICategoryResource* output, NSError* error)) handler;


/// Update a category template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param template The updated template information (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) updateCategoryTemplateWithId: (NSString*) _id
    template: (JSAPITemplateResource*) template
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;



@end
