#import <Foundation/Foundation.h>
#import "JSAPIChallengeActivityResource.h"
#import "JSAPIChallengeEventResource.h"
#import "JSAPIChallengeResource.h"
#import "JSAPIPageResourceBareChallengeActivityResource_.h"
#import "JSAPIPageResourceChallengeEventResource_.h"
#import "JSAPIPageResourceChallengeResource_.h"
#import "JSAPIPageResourceTemplateResource_.h"
#import "JSAPIResult.h"
#import "JSAPITemplateResource.h"
#import "JSAPIApi.h"

/**
* Knetik Platform API Documentation latest 
* This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
*
* OpenAPI spec version: latest 
* Contact: support@knetik.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface JSAPICampaignsChallengesApi: NSObject <JSAPIApi>

extern NSString* kJSAPICampaignsChallengesApiErrorDomain;
extern NSInteger kJSAPICampaignsChallengesApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(JSAPIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create a challenge
/// Challenges do not run on their own.  They must be added to a campaign before events will spawn. <br><br><b>Permissions Needed:</b> CHALLENGES_ADMIN
///
/// @param challengeResource The challenge resource object (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIChallengeResource*
-(NSURLSessionTask*) createChallengeWithChallengeResource: (JSAPIChallengeResource*) challengeResource
    completionHandler: (void (^)(JSAPIChallengeResource* output, NSError* error)) handler;


/// Create a challenge activity
/// <b>Permissions Needed:</b> CHALLENGES_ADMIN
///
/// @param challengeId The challenge id
/// @param challengeActivityResource The challenge activity resource object (optional)
/// @param validateSettings Whether to validate the settings being sent against the available settings on the base activity. (optional) (default to false)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIChallengeActivityResource*
-(NSURLSessionTask*) createChallengeActivityWithChallengeId: (NSNumber*) challengeId
    challengeActivityResource: (JSAPIChallengeActivityResource*) challengeActivityResource
    validateSettings: (NSNumber*) validateSettings
    completionHandler: (void (^)(JSAPIChallengeActivityResource* output, NSError* error)) handler;


/// Create a challenge activity template
/// Challenge Activity Templates define a type of challenge activity and the properties they have. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param challengeActivityTemplateResource The challengeActivity template resource object (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) createChallengeActivityTemplateWithChallengeActivityTemplateResource: (JSAPITemplateResource*) challengeActivityTemplateResource
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// Create a challenge template
/// Challenge Templates define a type of challenge and the properties they have. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param challengeTemplateResource The challenge template resource object (optional)
/// 
///  code:201 message:"Created",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) createChallengeTemplateWithChallengeTemplateResource: (JSAPITemplateResource*) challengeTemplateResource
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// Delete a challenge
/// <b>Permissions Needed:</b> CHALLENGES_ADMIN
///
/// @param _id The challenge id
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteChallengeWithId: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a challenge activity
/// A challenge can have multiple instances of the same activity and thus the id used is of the specific entry within the challenge. <br><br><b>Permissions Needed:</b> CHALLENGES_ADMIN
///
/// @param _id The challenge_activity id
/// @param challengeId The challenge id
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteChallengeActivityWithId: (NSNumber*) _id
    challengeId: (NSNumber*) challengeId
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a challenge activity template
/// If cascade = 'detach', it will force delete the template even if it's attached to other objects. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param cascade The value needed to delete used templates (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteChallengeActivityTemplateWithId: (NSString*) _id
    cascade: (NSString*) cascade
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a challenge event
/// <b>Permissions Needed:</b> CHALLENGES_ADMIN
///
/// @param _id The challenge event id
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteChallengeEventWithId: (NSNumber*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a challenge template
/// If cascade = 'detach', it will force delete the template even if it's attached to other objects. <br><br><b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param cascade The value needed to delete used templates (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) deleteChallengeTemplateWithId: (NSString*) _id
    cascade: (NSString*) cascade
    completionHandler: (void (^)(NSError* error)) handler;


/// Retrieve a challenge
/// <b>Permissions Needed:</b> ANY
///
/// @param _id The challenge id
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIChallengeResource*
-(NSURLSessionTask*) getChallengeWithId: (NSNumber*) _id
    completionHandler: (void (^)(JSAPIChallengeResource* output, NSError* error)) handler;


/// List and search challenge activities
/// <b>Permissions Needed:</b> ANY
///
/// @param challengeId The challenge id
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceBareChallengeActivityResource_*
-(NSURLSessionTask*) getChallengeActivitiesWithChallengeId: (NSNumber*) challengeId
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceBareChallengeActivityResource_* output, NSError* error)) handler;


/// Get a single challenge activity
/// A challenge can have multiple instances of the same activity and thus the id used is of the specific entry within the challenge. <br><br><b>Permissions Needed:</b> ANY
///
/// @param _id The challenge_activity id
/// @param challengeId The challenge id
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIChallengeActivityResource*
-(NSURLSessionTask*) getChallengeActivityWithId: (NSNumber*) _id
    challengeId: (NSNumber*) challengeId
    completionHandler: (void (^)(JSAPIChallengeActivityResource* output, NSError* error)) handler;


/// Get a single challenge activity template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN or CHALLENGES_ADMIN
///
/// @param _id The id of the template
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) getChallengeActivityTemplateWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// List and search challenge activity templates
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN or CHALLENGES_ADMIN
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceTemplateResource_*
-(NSURLSessionTask*) getChallengeActivityTemplatesWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceTemplateResource_* output, NSError* error)) handler;


/// Retrieve a single challenge event details
/// <b>Permissions Needed:</b> ANY
///
/// @param _id The challenge event id
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIChallengeEventResource*
-(NSURLSessionTask*) getChallengeEventWithId: (NSNumber*) _id
    completionHandler: (void (^)(JSAPIChallengeEventResource* output, NSError* error)) handler;


/// Retrieve a list of challenge events
/// <b>Permissions Needed:</b> ANY
///
/// @param filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the event start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
/// @param filterEndDate A comma separated string without spaces.  First value is the operator to search on, second value is the event end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
/// @param filterCampaigns check only for events from currently running campaigns (optional)
/// @param filterChallenge check only for events from the challenge specified by id (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceChallengeEventResource_*
-(NSURLSessionTask*) getChallengeEventsWithFilterStartDate: (NSString*) filterStartDate
    filterEndDate: (NSString*) filterEndDate
    filterCampaigns: (NSNumber*) filterCampaigns
    filterChallenge: (NSNumber*) filterChallenge
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceChallengeEventResource_* output, NSError* error)) handler;


/// Get a single challenge template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN or CHALLENGES_ADMIN
///
/// @param _id The id of the template
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) getChallengeTemplateWithId: (NSString*) _id
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// List and search challenge templates
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN or CHALLENGES_ADMIN
///
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceTemplateResource_*
-(NSURLSessionTask*) getChallengeTemplatesWithSize: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceTemplateResource_* output, NSError* error)) handler;


/// Retrieve a list of challenges
/// <b>Permissions Needed:</b> ANY
///
/// @param filterActiveCampaign Filter for challenges that are tied to active campaigns (optional)
/// @param filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the challenge start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
/// @param filterEndDate A comma separated string without spaces.  First value is the operator to search on, second value is the challenge end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
/// @param size The number of objects returned per page (optional) (default to 25)
/// @param page The number of the page returned, starting with 1 (optional) (default to 1)
/// @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional) (default to id:ASC)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIPageResourceChallengeResource_*
-(NSURLSessionTask*) getChallengesWithFilterActiveCampaign: (NSNumber*) filterActiveCampaign
    filterStartDate: (NSString*) filterStartDate
    filterEndDate: (NSString*) filterEndDate
    size: (NSNumber*) size
    page: (NSNumber*) page
    order: (NSString*) order
    completionHandler: (void (^)(JSAPIPageResourceChallengeResource_* output, NSError* error)) handler;


/// Update a challenge
/// If the challenge is a copy, changes will propagate to all the related challenges. <br><br><b>Permissions Needed:</b> CHALLENGES_ADMIN
///
/// @param _id The challenge id
/// @param challengeResource The challenge resource object (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPIChallengeResource*
-(NSURLSessionTask*) updateChallengeWithId: (NSNumber*) _id
    challengeResource: (JSAPIChallengeResource*) challengeResource
    completionHandler: (void (^)(JSAPIChallengeResource* output, NSError* error)) handler;


/// Update a challenge activity
/// A challenge can have multiple instances of the same activity and thus the id used is of the specific entry within the challenge. <br><br><b>Permissions Needed:</b> CHALLENGES_ADMIN
///
/// @param _id The challenge_activity id
/// @param challengeId The challenge id
/// @param challengeActivityResource The challenge activity resource object (optional)
/// @param validateSettings Whether to validate the settings being sent against the available settings on the base activity. (optional) (default to false)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return void
-(NSURLSessionTask*) updateChallengeActivityWithId: (NSNumber*) _id
    challengeId: (NSNumber*) challengeId
    challengeActivityResource: (JSAPIChallengeActivityResource*) challengeActivityResource
    validateSettings: (NSNumber*) validateSettings
    completionHandler: (void (^)(NSError* error)) handler;


/// Update an challenge activity template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param challengeActivityTemplateResource The challengeActivity template resource object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) updateChallengeActivityTemplateWithId: (NSString*) _id
    challengeActivityTemplateResource: (JSAPITemplateResource*) challengeActivityTemplateResource
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;


/// Update a challenge template
/// <b>Permissions Needed:</b> TEMPLATE_ADMIN
///
/// @param _id The id of the template
/// @param challengeTemplateResource The challenge template resource object (optional)
/// 
///  code:204 message:"No Content",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found"
///
/// @return JSAPITemplateResource*
-(NSURLSessionTask*) updateChallengeTemplateWithId: (NSString*) _id
    challengeTemplateResource: (JSAPITemplateResource*) challengeTemplateResource
    completionHandler: (void (^)(JSAPITemplateResource* output, NSError* error)) handler;



@end
